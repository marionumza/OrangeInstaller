#encoding: utf-8
from OpenOrange import *
from GlobalTools import *

ParentPurchaseOrderWindow = SuperClass("PurchaseOrderWindow","PurchaseTransactionWindow",__file__)
class PurchaseOrderWindow(ParentPurchaseOrderWindow):

    def activateNextCell(self, matrixname, row, col):
        columns = self.getMatrixColumns(matrixname)
        if columns[col] == "ArtCode": # To Qty
            row,col = getNextCol(columns,row,col,"Qty")
        elif columns[col] == "Qty": # To Next Row
            col = 0
            row += 1
        else:
            row,col = getNextCol(columns,row,col,"")
        return (row,col)

    def afterEdit(self, fieldname):
        ParentPurchaseOrderWindow.afterEdit(self, fieldname)
        record = self.getRecord()
        if (fieldname == "PayTerm"):
            record.pastePayTerm()
        elif (fieldname == "User"):
            record.pasteUser()
        elif (fieldname == "StockDepo"):
            record.pasteStockDepo()
        elif (fieldname == "SupCode"):
            record.pasteSupCode()
        elif (fieldname == "Contact"):
            record.pasteContact()
        elif (fieldname == "ProvinceCode"):
            record.pasteProvinceCode()
        elif (fieldname == "ShipProvinceCode"):
            record.pasteShipProvinceCode()
        elif (fieldname == "ZipCode"):
            record.pasteZipCode()
        elif (fieldname == "LocalityCode"):
            record.pasteLocalityCode()
        elif (fieldname == "FreightCompany"):
            record.pasteFreightCompany()
        elif (fieldname == "VATIncluded"):
            record.pasteVATIncluded()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentPurchaseOrderWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        record = self.getRecord()
        if (fieldname == "Items"):
            item = record.Items[rownr]
            if (rowfieldname == "ArtCode"):
                item.pasteArtCode(record)
                item.sumUp(record)
                record.sumUp()
            if (rowfieldname == "SupArtCode"):
                item.pasteSupArtCode(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname == "Price"):
                item.pastePrice(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname == "Qty2Price"):
                item.pasteQty2Price(record)
                item.pasteRowNet(record)
                record.sumUp()
            elif (rowfieldname == "Qty2"):
                item.pasteQty2(record)
                item.pasteRowNet(record)
                record.sumUp()
            elif (rowfieldname == "VATPrice"):
                item.pasteVATPrice(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname == "VATCode"):
                item.pasteVATCode(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname =="Discount"):
                item.pasteDiscount(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname =="Qty"):
                item.pasteQty(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname =="Unit"):
                item.pasteUnit(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname =="SupQty"):
                item.pasteSupQty(record)
                item.sumUp(record)
                record.sumUp()
            elif (rowfieldname =="RowTotal"): # important if you know the total and the qty
                item.pasteRowTotal(record)
                item.sumUp(record)
            elif (rowfieldname =="RowNet"):
                item.pasteRowTotal(record)  # ???? paste RowNet !
                item.sumUp(record)
            elif (rowfieldname in ["Discount1","Discount2","Discount3","Discount4","Discount5"]):
                item.pasteAccDiscounts(record)
                item.sumUp(record)
                record.sumUp()


    def afterShowRecord(self):
        ParentPurchaseOrderWindow.afterShowRecord(self)
        record = self.getRecord()
        self.setTabPageVisibility("Items", "ItemsVATExcl", not record.VATIncluded)
        self.setTabPageVisibility("Items", "ItemsVATIncl", record.VATIncluded)


    def genPurchaseInvoiceFromGoodsReceipt(self):
        self.genPurchaseInvoice(None,True)

    def genPurchaseInvoice(self, currency=None, fromgoodsreceipt=False):
        from PurchaseOrder import PurchaseOrder
        record = self.getRecord()
        #Controles para no generar
        if (record.isModified() or record.isNew()):
            message(tr("You need to save the current record first!"))
            return
        from PurchaseOrderSettings import PurchaseOrderSettings
        pos = PurchaseOrderSettings.bring()
        #Si esta cerrada no se reciben mas pero si facturar.
        if (record.Closed and pos and pos.NotGenInvoiceFromClosedOrder):
           message("PURCHASEORDERCLOSED")
           return False
        if (not record.confirmed()):
            message(tr("REGISTERNOTAPPROVED"))
            return False
        if (record.Invalid): 
            message(tr("ONLYALLOWED4NOTINVALTRANS"))
            return False
        #
        #log("po = PurchaseOrder.bring(record.SerNr)")
        po = PurchaseOrder.bring(record.SerNr)
        #log("sup = Supplier.bring(po.SupCode)")
        from Supplier import Supplier
        sup = Supplier.bring(po.SupCode)
        currency = sup.Currency
        if (not currency or currency != po.Currency):
            from Currency import Currency
            base1 = Currency.getBase1()
            base2 = Currency.getBase2()
            currency = getSelection(tr("Select Currency of Transaction"), (base1,base2))
            if (not currency):
                currency = base1
        pinv = po.genPurchaseInvoice(Currency=currency,FromGoodsReceipt=fromgoodsreceipt)
        if pinv:
            pinv.openInWindow()
            self.closeAfterGen()
        else:
            message(pinv)
        return pinv

    def genGoodsReceipt(self):
        po = self.getRecord()
        if po.isModified() or po.isNew():
            message(tr("You need to save the current record first!"))
            return
        if (self.getRecord().Closed):
            message("PURCHASEORDERCLOSED")
            return False
        po.refresh()
        currency = getMasterRecordField("Supplier","Currency",self.getRecord().SupCode)
        if (not currency or currency != po.Currency):
            from Currency import Currency
            base1 = Currency.getBase1()
            base2 = Currency.getBase2()
            if po.Currency == base2:
                currency = getSelection(tr("Select Currency of Transaction"), (base2,base1))
            else:
                currency = getSelection(tr("Select Currency of Transaction"), (base1,base2))
            if (not currency):
                currency = base1
        gr = po.genGoodsReceipt(Currency=currency)
        if gr:
            gr.showMessages()
            gr.openInWindow()
            self.closeAfterGen()            
        else:
            message(gr)        
        return gr

    def genDownPayment(self):
        po = self.getRecord()
        if (po.Closed):
            message("PURCHASEORDERCLOSED")
            return False
        paym = po.genDownPayment()
        if paym:
            paym.openInWindow()


    def genServiceReception(self):
        record = self.getRecord()
        
        rows = [r for r in record.Items if (r.Qty - r.ReceivedQty) > 0]
        if len(rows):
            if len(rows) == 1:
                rownr = rows[0].rowNr
            else:
                selrownr = getSelection(tr("Select Item To be Received"), tuple(["%s->%s %s" % (r.rowNr, r.ArtCode, r.Name) for r in rows]))
                if selrownr:
                    rownr = int(selrownr.split("->")[0])
                else:
                    rownr = 0                
            rs = self.getRecord().genServiceReception(rownr)
            if rs:
                rs.openInWindow()
                self.closeAfterGen()
            else:
                message(rs)
            return rs
        else:
            return ErrorResponse(tr("There are no Pending Reception"))

    def genReturnSupplier(self):
        rs = self.getRecord().genReturnSupplier()
        if rs:
            rs.openInWindow()
            self.closeAfterGen()
        else:
            message(rs)
        return rs

    def genPurchaseSuggestion(self):
        po = self.getRecord()
        po.pastePurchaseSuggestion()

    def afterDeleteRow(self, fieldname, rownr):
        ParentPurchaseOrderWindow.afterDeleteRow(self, fieldname, rownr)
        purchaseorder = self.getRecord()
        if (fieldname == "Items"):
            purchaseorder.sumUp()

    def beforeDeleteRow(self, detailName, rownr):
        res = ParentPurchaseOrderWindow.beforeDeleteRow(self, detailName, rownr)
        if (not res): return res
        record = self.getRecord()
        if (detailName == "Items"):
            row = record.Items[rownr]
            if (not row.canBeAltered(record)):
                message(tr("REGISTERHAVETRANS"))
                res = False
        return res

    def beforeInsertRow(self, detailName, rownr):
        res = ParentPurchaseOrderWindow.beforeInsertRow(self, detailName, rownr)
        record = self.getRecord()
        if (detailName == "Items"):
            if (rownr <= len(record.Items)-1):
                row = record.Items[rownr]
                if (not row.canBeAltered(record)):
                    message(tr("REGISTERHAVETRANS"))
                    res = False
        return res
        
    def afterInsertRow(self, detailfieldname, rownr):
        ParentPurchaseOrderWindow.afterInsertRow(self, detailfieldname, rownr)
        so = self.getRecord()
        if detailfieldname == "Items":
            so.Items[rownr].setDefaultValues(so)
            
    def showItemCostHistoryReport(self):
        po = self.getRecord()
        rownr = self.currentRow("PurchaseOrderItemRowsExcl")
        if (rownr == -1):
            rownr = self.currentRow("PurchaseOrderItemRowsIncl")
        if (rownr < 0):
            return
        porow = po.Items[rownr]
        from PurchasePriceHistory import PurchasePriceHistory
        report = PurchasePriceHistory()
        report.defaults()
        report.getRecord().Item = porow.ArtCode
        report.open(False)

    def showItemStatusReport(self):
        po = self.getRecord()
        rownr = self.currentRow("PurchaseOrderItemRowsExcl")
        if (rownr==-1): rownr = self.currentRow("PurchaseOrderItemRowsIncl")
        if (rownr<0): return
        porow = po.Items[rownr]
        from ItemStatusReport import ItemStatusReport
        report = ItemStatusReport()
        report.defaults()
        report.getRecord().ArtCode = porow.ArtCode
        report.open(False)

    def showPurchaseOrderStatusReport(self):
        from PurchaseOrderStatusReport import PurchaseOrderStatusReport
        report = PurchaseOrderStatusReport()
        report.getRecord().PurchaseOrderNr = self.getRecord().SerNr
        report.open(False)

    def filterPasteWindow(self,fieldname):
        if fieldname == "Contact":
            if self.getRecord().SupCode:
                return "({CustCode} = s|%s| AND {ContactType}=i|1|)" % self.getRecord().SupCode
        if fieldname == "LocalityCode":
            if self.getRecord().ZipCode:
                return "{ZipCode} = s|%s|" % self.getRecord().ZipCode
        elif fieldname == "PayTerm":
            from PayTerm import PayTerm
            return "({OperationType} IS NULL OR {OperationType} IN (i|%i|, i|%i|))" % (PayTerm.ALL_OPERATIONS,PayTerm.PURCHASE)        
        return ParentPurchaseOrderWindow.filterPasteWindow(self,fieldname)

    def canAuthorize(self):
        res = self.getRecord().canAuthorize()
        if not res: return res
        from PurchaseOrderSettings import PurchaseOrderSettings
        pos = PurchaseOrderSettings.bring()
        if pos.FirstAuthorizationAmount:
            if self.getRecord().Total <= pos.FirstAuthorizationAmount:
                res = currentUserCanDo("CanAuthorizeFirstAmountPurchaseOrder", False)
                if res: return res
                res = currentUserCanDo("CanAuthorizeSecondAmountPurchaseOrder", False)
                if res: return res                     
            if self.getRecord().Total <= pos.SecondAuthorizationAmount:
                res = currentUserCanDo("CanAuthorizeSecondAmountPurchaseOrder", False)
                if res: return res
        else:
            res = currentUserCanDo("CanAuthorizePurchaseOrder", False)
            if res: return res
        res = currentUserCanDo("CanAuthorizeAnyPurchaseOrder", False)
        if res: return res
        return res

    def authorize(self):
        res = self.canAuthorize()
        if res:
            self.getRecord().AuthorizedBy = currentUser()
        else:
            message(res)
        return res

    def sortItemRows(self):
        po = self.getRecord()
        if (not po.confirmed()):
            po.sortItems()
            
    def genCase(self):
        case = self.getRecord().genCase()
        if case:
            case.openInWindow()
        else:
            message(case)
            
    def loadFromFile(self):
        message("%s: TSV<br>%s: %s, %s" % (tr("File Format"), tr("Columns"), tr("Code"), tr("Quantity") ))
        record = self.getRecord()
        fileDic = {}
        fname = getOpenFileName()
        if fname:
            file = open(fname, 'r')
            lineNr = 1
            for line in file.readlines():
                fields = line.replace("\n","").split("\t")
                if len(fields) != 2:
                    message("Format Error line: %i \n%s" %(lineNr,line))
                    return
                code = fields[0]
                qty = float(fields[1])
                key = '%s' % (code)
                itemdata = fileDic.get(key, {})
                if itemdata:
                    itemdata["Qty"] += qty
                else:
                    itemdata["ArtCode"] = code
                    itemdata["Qty"] = qty
                fileDic[key] = itemdata
                lineNr += 1
            record.uploadItemsfromFile(fileDic)
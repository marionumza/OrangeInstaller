#encoding: utf-8
from OpenOrange import *

ParentTransactionWindow = SuperClass("TransactionWindow","NumerableWindow",__file__)
class TransactionWindow(ParentTransactionWindow):

    def afterShowRecord(self):
        ParentTransactionWindow.afterShowRecord(self)
        from StockSettings import StockSettings
        ss = StockSettings.bring()
        res = currentUserCanDo("CanAccessCostData",False) or ss.AllCanViewCosts
        self.setTabPageVisibility("Items", "CostPage", res)

    def afterEdit(self, fieldname):
        ParentTransactionWindow.afterEdit(self, fieldname)
        if (fieldname == "TransDate"):
            self.getRecord().pasteTransDate()
        elif fieldname == "Computer":
            self.getRecord().pasteComputer()
        elif fieldname == "User":
            self.getRecord().pasteUser()
        elif fieldname == "Office":
            self.getRecord().pasteOffice()
        #elif (fieldname == "Labels"): #EC Aun no esta definida la funcion walkdown en Label, causa problemas en todos lados
        #    self.getRecord().pasteLabels()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentTransactionWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        rec = self.getRecord()
        if (fieldname == "Items"):
            row = rec.Items[rownr]
            if (rowfieldname == "Qty2"):
                row.pasteQty2(rec)
                row.sumUp(rec)


    def beforeDeleteRow(self, detailfieldname, rownr):
        result = ParentTransactionWindow.beforeDeleteRow(self, detailfieldname, rownr)
        if not result: return result
        record = self.getRecord()
        if record.confirmed() or record.unconfirming():
            return False
        return True

    def beforeInsertRow(self, detailfieldname, rownr):
        result = ParentTransactionWindow.beforeInsertRow(self, detailfieldname, rownr)
        if not result: return result
        record = self.getRecord()
        if record.confirmed() or record.unconfirming():
            return False
        return True

    def save(self):
        record = self.getRecord()
        res = ParentTransactionWindow.save(self)
        record = self.getRecord()
        if record.confirmed():
            from EventTriggers import EventTriggers
            EventTriggers.fireTriggers(record,0,1)
        return res

    def showNLT(self):
        record = self.getRecord()
        nlt = record.getNLTTrans()
        from NLTWindow import NLTWindow
        if nlt:
            nltwindow = NLTWindow()
            nltwindow.setRecord(nlt)
            nltwindow.open()
        else:
            res = currentUserCanDo("CanReGenNLT", False)
            if not res:
               message(tr("Nominal Ledger Transaction does not exist"))
            else:
               if askYesNo("Do you want to regenerate the Nominal Ledger Transaction?") == 1:
                  nltwindow = NLTWindow()
                  nlt = record.genNLTTrans()
                  if nlt:
                    nlt.openInWindow()

    def filterPasteWindowRow(self,fieldname,rowfieldname,rownr):
        filters = []
        res = ParentTransactionWindow.filterPasteWindowRow(self,fieldname,rowfieldname,rownr)
        if res:
            filters.append(res)
        if fieldname == "Items":
            if rowfieldname == "Labels":
                rec = self.getRecord()
                from LabelControl import LabelControl
                lc = LabelControl.trybring(rec.tableName())
                if lc and lc.DetailTypes:
                   mask = "','".join(lc.DetailTypes.split(","))
                   filters.append("{Type} IN ('%s')" % mask)
        return " AND ".join(filters)

    def filterPasteWindow(self, fieldname):
        if fieldname == "Labels":
            rec = self.getRecord()
            from LabelControl import LabelControl
            lc = LabelControl.trybring(rec.tableName())
            if lc and lc.LabelTypes:
               mask = "','".join(lc.LabelTypes.split(","))
               return "{Type} IN ('%s')" % mask

    def authorize(self):
        record = self.getRecord()
        return record.authorize()

    def keyPressed(self, key, state, editorname, columnname, rownr):
        res = ParentTransactionWindow.keyPressed(self, key, state, editorname, columnname, rownr)
        if (not res): return res
        #print [key, state, editorname, columnname, rownr]
        self.CTRLMInvoqued = False
        if (key == "\r" and "CONTROL" in state):
            self.CTRLMInvoqued = True
        return res

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if fieldname in record.detailNames():
            if (rowfieldname == "ArtCode"):
                row = record.details(fieldname)[rownr]
                from StockSettings import StockSettings
                ss = StockSettings.bring()
                if ss.ClassificationType:
                    from ItemPaster import ItemPaster
                    ip = ItemPaster()
                    ip.ParentWindow = self
                    ip.ParentRecord = record
                    ip.FieldName = fieldname
                    ip.RowFieldName = rowfieldname
                    ip.RowNr = rownr
                    ip.openInWindow()
                    return ""
                if (not hasattr(self,"CTRLMInvoqued") or not self.CTRLMInvoqued):
                    from ItemSearchSettings import ItemSearchSettings
                    iss = ItemSearchSettings.bring()
                    if iss.Enabled:
                        from AdvancedItemSearch import AdvancedItemSearch
                        ais = AdvancedItemSearch()
                        ais.defaults()
                        ais.ParentWindow = self
                        ais.ParentRecord = record
                        ais.FieldName = fieldname
                        ais.RowFieldName = rowfieldname
                        ais.RowNr = rownr
                        ais.open(False)
                        return ""
                    elif iss.UseNewMethod and not "WEBCLIENT" in globals():# No funciona en webclient
                        found = False
                        for tbl in iss.EnabledTables:
                            if record.name() == tbl.TableName:
                                found = True
                                break
                        if found:
                            openItemSearchWindow(self, row, fieldname)
                            return ""
        return ParentTransactionWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)

    def closeAfterGen(self):
        from TransactionSettings import TransactionSettings
        tset = TransactionSettings.bring()
        if (tset.CloseWindowAfterGen):
            self.close()

    #Esto est√° implementado en NumerableWindow
    #def buttonClicked(self, buttonname):
    #    trans = self.getRecord()
    #    if buttonname == "openOrigin":
    #        if trans.OriginNr:
    #            from Transaction import Transaction
    #            recname = None
    #            for it in Transaction.Origin.iteritems():
    #                if it[1] == trans.OriginType:
    #                    recname = it[0]
    #            if recname and recname != "Nothing":
    #                exec("from %s import %s" % (recname,recname))
    #                exec("rec = %s.bring(%i)" % (recname,trans.OriginNr))
    #                if rec:
    #                    exec("from %sWindow import %sWindow" % (recname,recname))
    #                    exec("win = %sWindow()" % recname)
    #                    win.setRecord(rec)
    #                    win.open()

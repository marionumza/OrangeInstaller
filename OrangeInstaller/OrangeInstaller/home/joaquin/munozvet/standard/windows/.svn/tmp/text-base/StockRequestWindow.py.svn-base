#encoding: utf-8
from OpenOrange import *
from GlobalTools import *

ParentStockRequestWindow = SuperClass("StockRequestWindow","TransactionWindow",__file__)
class StockRequestWindow(ParentStockRequestWindow):

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentStockRequestWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        stockreq = self.getRecord()
        if (fieldname == "Items"):
            sreqrow = stockreq.Items[rownr]
            if (rowfieldname == "ArtCode"):
                sreqrow.pasteArtCode(stockreq)
            elif (rowfieldname == "Qty"):
                sreqrow.pasteQty()
                stockreq.sumUp()
            elif (rowfieldname == "Unit"):
                sreqrow.pasteUnit()
                stockreq.sumUp()

    def afterDeleteRow(self, fieldname, rownr):
        stockreq = self.getRecord()
        stockreq.sumUp()

    def genStockMovement(self):
        stockreq = self.getRecord()
        stockmov = stockreq.genStockMovement()
        if stockmov:
            stockmov.openInWindow()
            self.closeAfterGen()
        return True

    def genPurchaseOrder(self):
        record = self.getRecord()
        #if record.Status < 3:
        #    message("El pedido debe pasar por OK Preparado")
        #    return None
        from PurchaseOrder import PurchaseOrder
        if (record.isNew() or record.isModified()):
            message("REGISTERNOTSAVED")
            return 
        porder = record.genPurchaseOrder()
        record.showMessages()
        if (porder):
            porder.openInWindow()
            self.closeAfterGen()

    def showPickingList(self):
        record = self.getRecord()
        from StockReqPicking import StockReqPicking
        srstatus = StockReqPicking()
        srstatus.defaults()
        srstatus.StockRequestNr = record.SerNr
        srstatus.open(False)

    def showStockRequestStatus(self):
        record = self.getRecord()
        from StockRequestStatus import StockRequestStatus
        srstatus = StockRequestStatus()
        srstatus.defaults()
        srstatus.getRecord().StockRequest = record.SerNr
        srstatus.open(False)

    def afterInsertRow(self, fieldname, rownr):
        ParentStockRequestWindow.afterInsertRow(self, fieldname, rownr)
        record = self.getRecord()
        if (fieldname == "Items"):
            nrow = record.Items[rownr]
            nrow.PlanReceiptDate = today()
        return

    def beforeDeleteRow(self, detailname, rownr):
        res = ParentStockRequestWindow.beforeDeleteRow(self, detailname, rownr)
        if (not res): return res
        record = self.getRecord()
        if (record.confirmed() or record.Closed):
            return False
        return res

    def beforeInsertRow(self, detailname, rownr):
        res = ParentStockRequestWindow.beforeInsertRow(self, detailname, rownr)
        if (not res): return res
        record = self.getRecord()
        if (record.confirmed() or record.Closed):
            return False
        return res

    def filterPasteWindowRow(self, fname, rfname,rownr):
        res =  ParentStockRequestWindow.filterPasteWindowRow(self, fname, rfname,rownr)
        record = self.getRecord()
        if (fname == "Items"):
            if (rfname == "ArtCode"):
                from PurchaseOrderSettings import PurchaseOrderSettings
                poset = PurchaseOrderSettings.bring()
                res = "({Closed} IS NULL OR {Closed} = i|0|) "
                if (not poset.CanPasteSaleItems):
                    res += " AND (UseType = i|0| OR UseType = i|2| OR UseType IS NULL ) "
        return res


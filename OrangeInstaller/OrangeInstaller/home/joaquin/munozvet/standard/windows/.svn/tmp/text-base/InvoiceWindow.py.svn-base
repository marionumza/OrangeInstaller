#encoding: utf-8
from OpenOrange import *
from GlobalTools import *

ParentInvoiceWindow = SuperClass("InvoiceWindow","SalesTransactionWindow",__file__)
class InvoiceWindow(ParentInvoiceWindow):

    def save(self):
        rec = self.getRecord()
        if (not rec.OnAccNr and rec.Saldo and rec.confirming()):
          downpaynr = rec.getApplicableOnAccount()
          from FinSettings import FinSettings
          fs = FinSettings.bring()
          if downpaynr and not fs.DoNotApplyAutomaticallyOnAcc:
            res = askYesNo(tr("There is a downpayment with sufficient balance to pay the invoice. Do you want to apply it?"))
            if (res):
                rec.OnAccNr = downpaynr
                rec.pasteOnAccNr()
                rec.sumUp()
        ParentInvoiceWindow.save(self)

    def getTitle(self):
        origtitle = ["Invoice", "Credit Note", "Debit Note","Unknown Type"]
        rec = self.getRecord()
        if not rec: return self.getOriginalTitle()
        t = tr(origtitle[rec.InvoiceType]) + " " + str(rec.SerNr)
        if rec.ToSerNr and rec.SerNr != rec.ToSerNr: t += " / " + str(rec.ToSerNr)
        if not rec.internalId:
             t += ": " + tr("New")
        elif rec.isModified():
             t += ": " + tr("Modified")
        if rec.isInvalid():
            t += " " + tr("Invalidated")
            date = rec.getInvalidDate()
            if (str(date) != "0000-00-00"):
                t += " " + date.strftime("%d/%m/%Y")
        return t

    def afterShowRecord(self):
        ParentInvoiceWindow.afterShowRecord(self)
        from SalesSettings import SalesSettings
        ss = SalesSettings.bring()
        if ss.ItemPages == 2:
            self.setTabPageVisibility("Items", "ItemsVATExcl", True)
            self.setTabPageVisibility("Items", "ItemsVATIncl", False)
        elif ss.ItemPages == 3:
            self.setTabPageVisibility("Items", "ItemsVATIncl", True)
            self.setTabPageVisibility("Items", "ItemsVATExcl", False)
        self.checkItemPages()
        if (not currentUserCanDo("CanViewInvoiceDiscountsTab")):
            self.setTabPageVisibility("Items", "DiscountsPage", False)
        if (not currentUserCanDo("CanViewInvoiceVATExclTab")):
            self.setTabPageVisibility("Items", "ItemsVATExcl", False)
        if (not currentUserCanDo("CanViewInvoiceStockTab")):
            self.setTabPageVisibility("Items", "Stock", False)
        if (not currentUserCanDo("CanViewInvoiceCommentTab")):
            self.setTabPageVisibility("Items", "Comment", False)
        if (not currentUserCanDo("CanViewInvoiceTermsTab")):
            self.setTabPageVisibility("Items", "Terms", False)
        if (not currentUserCanDo("CanViewInvoiceLegalTab")):
            self.setTabPageVisibility("Items", "Legal", False)
        if (not currentUserCanDo("CanViewInvoiceOthersTab")):
            self.setTabPageVisibility("Items", "Others", False)
        if (not currentUserCanDo("CanViewInvoiceAddressesTab")):
            self.setTabPageVisibility("Items", "Addresses", False)
        if (not currentUserCanDo("CanViewInvoicePaymentsTab")):
            self.setTabPageVisibility("Items", "Payments", False)
        viewinstalls = True if ss.InstallmentSales else False
        if viewinstalls and currentUserCanDo("CanViewInvoiceInstallmentsTab"): viewinstalls = True
        self.setTabPageVisibility("Items", "Installments", viewinstalls)
        if (not currentUserCanDo("CanViewInvoiceTaxesTab")):
            self.setTabPageVisibility("Items", "Taxes", False)

    def activateNextCell(self, matrixname, row, col):
        columns = self.getMatrixColumns(matrixname)
        if columns[col] == "ArtCode": # To Qty
            row,col = getNextCol(columns,row,col,"Qty")
        elif columns[col] == "Qty": # To Next Row
            col = 0
            row += 1
        else:
            row,col = getNextCol(columns,row,col,"")
        return (row,col)

    def checkItemPages(self):
        ParentInvoiceWindow.afterShowRecord(self)
        from SalesSettings import SalesSettings
        ss = SalesSettings.bring()
        if ss.ItemPages == 1:
            from PriceDeal import PriceDeal
            pd = PriceDeal.bring(self.getRecord().PriceDeal)
            inclvat = ss.DefaultInclVAT
            if pd: inclvat = pd.InclVAT
            if inclvat:
                self.setTabPageVisibility("Items", "ItemsVATIncl", True)
                self.setTabPageVisibility("Items", "ItemsVATExcl", False)
            else:
                self.setTabPageVisibility("Items", "ItemsVATExcl", True)
                self.setTabPageVisibility("Items", "ItemsVATIncl", False)

    def afterEdit(self, fieldname):
        ParentInvoiceWindow.afterEdit(self, fieldname)
        invoice = self.getRecord()
        from SalesSettings import SalesSettings
        ss = SalesSettings().bring()
        from StockSettings import StockSettings
        sts = StockSettings().bring()
        if (fieldname == "CustCode"):
            self.checkItemPages()
            invoice.sumUp()
            from Customer import Customer
            customer = Customer.bring(invoice.CustCode)
            if customer:
                if customer.hasOnAccounts():
                    message(tr("This Company has pending downpayments"))
                if customer.hasOnAccounts('Invoice'):
                    message(tr("This Company has pending downpayments"))
                    #res = getSelection(tr('Â¿Aplicar Anticipo Abierto de Cliente?'),tuple(customer.listOnAccounts()))
                    #if res:
                    #    invoice.applyOnAccount(res)
        elif (fieldname == "PrintFormat"):
            invoice.sumUp()
        elif (fieldname == "Contact"):
            invoice.pasteContact()
        elif (fieldname == "TransDate"):
            invoice.pasteTransDate()
        elif (fieldname == "InvoiceDate"):
            invoice.pasteInvoiceDate()
        elif (fieldname == "PayTerm"):
            invoice.pastePayTerm()
        elif (fieldname == "PriceDeal"):
            invoice.pastePriceDeal()
            self.checkItemPages()
        elif(fieldname in ("FirstDueDay","Installments")):
            invoice.recalculateInstalls()
            #invoice.sumUp() #no llamar aca al sumup xq regenera los taxes y deja la factura inconsistente
        elif (fieldname == "InvoiceType" and invoice.InvoiceType == 1 and (invoice.oldFields("InvoiceType").getValue() != 1 and invoice.Total >= 0)):
            if (ss.CreditWithoutInv == 0):
               message("No puede seleccionar este tipo")
               invoice.InvoiceType = invoice.oldFields("InvoiceType").getValue()
            else:
              if sts.CredNoteNoStockUpdf:
                invoice.UpdStockFlag = False
        elif(fieldname == "SalesMan"):
            invoice.pasteSalesMan()
        elif (fieldname == "ProvinceCode"):
            invoice.pasteProvinceCode()
        elif (fieldname == "ZipCode"):
            invoice.pasteZipCode()
        elif (fieldname == "DelZipCode"):
            invoice.pasteDelZipCode()
        elif (fieldname == "LocalityCode"):
            invoice.pasteLocalityCode()
        elif (fieldname == "DelLocalityCode"):
            invoice.pasteDelLocalityCode()
        elif (fieldname == "OnAccNr"):
            invoice.pasteOnAccNr()
            invoice.sumUp()
        elif (fieldname == "OnAccValue"):
            invoice.pasteOnAccValue()
            invoice.sumUp()
            if (invoice.Installments > 0):
                invoice.recalculateInstalls()
        elif (fieldname == "OnAccNrFromCust"):
            invoice.pasteOnAccNrFromCust()
        elif (fieldname == "ManualInstallments"):
            if (invoice.ManualInstallments):
                res = askYesNo(tr("This Will Erase The Actual Installments. Do You Want to Continue?"))
                if (res == 1):
                    invoice.recalculateInstalls()
                else:
                    invoice.ManualInstallments = False
        elif (fieldname == "DiscountDeal"):
            invoice.pasteDiscountDeal()
        elif (fieldname == "SerNr"):
            invoice.cleanOfficialSerNr()
        elif fieldname == "AppliesToInvoiceNr":
            invoice.sumUp()
        invoice.showMessages()

    def filterPasteWindow(self, fieldname):
        inv = self.getRecord()
        if fieldname == "LocalityCode":
            if inv.ZipCode:
                return "{ZipCode} = s|%s|" % inv.ZipCode
        elif fieldname == "DelLocalityCode":
            if inv.ZipCode:
                return "{ZipCode} = s|%s|" % inv.DelZipCode
        elif (fieldname == "Contact"):
            if (inv.CustCode):
                filt = "{CustCode}=s|%s|" % inv.CustCode
                return filt
        elif (fieldname == "OnAccNr"):
            from Numerable import Numerable
            return "(({OpenFlag} = i|1|) AND ({Entity} = s|%s|) AND ({Type} = i|0|) AND ({OriginType} = i|%s|))" % (inv.CustCode, Numerable.Origin['Receipt'])
        elif fieldname == "OnAccNrFromCust":
            from Numerable import Numerable
            sql = "(({OpenFlag} = i|1|) AND ({Entity} = s|%s|) AND ({Type} = i|0|) AND ({OriginType} = i|%s|))" % (inv.CustCode, Numerable.Origin['Invoice'])
            onaccrow = filter(lambda x : x.OnAccNr , inv.Items)
            if len(onaccrow):
                sql += " AND ( {SerNr} NOT IN (%s) )" % ",".join(map(lambda x: "i|%s|" % x.OnAccNr, onaccrow))
            return sql
        elif (fieldname == "InvCat"):
            return "({Type} = i|0|)"
        elif fieldname == "PayTerm":
            from PayTerm import PayTerm
            return "({OperationType} IS NULL OR {OperationType} IN (i|%i|, i|%i|))" % (PayTerm.ALL_OPERATIONS,PayTerm.SALES)
        return ParentInvoiceWindow.filterPasteWindow(self,fieldname)

    def filterPasteWindowRow(self, detailfieldname, rowfieldname, rownr):
        res = ""
        if detailfieldname == "Items":
            if rowfieldname == "ArtCode":
                res += "(({Closed} IS NULL OR {Closed} = i|0|) AND (UseType = i|0| OR UseType = i|1| OR UseType IS NULL ) AND "
                res += "({ExcludeFromStockDepos} IS NULL OR " 
                res += "FIND_IN_SET(s|%s|,{ExcludeFromStockDepos}) = 0))" % self.getRecord().StockDepo
        elif (detailfieldname == "Payments"):
            if (rowfieldname == "ChequeNr"):
                res += "{Status} = 0 "
            elif (rowfieldname == "PayMode"):
                res += "(({Closed} IS NULL OR {Closed} = i|0|) AND (UseType = i|0| OR UseType = i|1| OR UseType IS NULL )) "
                from SalesSettings import SalesSettings
                ss = SalesSettings.bring()
                if (ss.UsePayModeByOffice):
                    res += "AND (Office LIKE s|%%,%s,%%| " %self.getRecord().Office
                    res += "OR Office LIKE s|%s,%%| "  %self.getRecord().Office
                    res += "OR Office LIKE s|%%,%s| "  %self.getRecord().Office
                    res += "OR Office = s|%s| )"  %self.getRecord().Office
            elif (rowfieldname == "CreditCard"):
                res += "{CustCode} = s|%s| " %self.getRecord().CustCode
        if (res):
            return res
        return ParentInvoiceWindow.filterPasteWindowRow(self,detailfieldname, rowfieldname, rownr)

    def fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr):
        ParentInvoiceWindow.fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr)
        if (pastewindowname == "SerialNrPasteWindow"):
            record = self.getRecord()
            itemrow = record.details(fieldname)[rownr]
            query = Query()
            query.sql = "SELECT [bt].{BestBefore} AS {DueDate}, [Stock].{SerialNr}, [Stock].{StockDepo}, [Stock].{StockPos}, "
            query.sql += "SUM(IFNULL([Stock].{Qty},0.0)) as {Qty} FROM [Stock] "
            query.sql += "LEFT JOIN [BatchText] [bt] ON [bt].{ArtCode} = [Stock].{ArtCode} AND [bt].{SerialNr} = [Stock].{SerialNr} \n"
            query.sql += "WHERE?AND [Stock].{SerialNr} <> s|| "
            query.sql += "WHERE?AND [Stock].{ArtCode} = s|%s| " % itemrow.ArtCode
            query.sql += "WHERE?AND [Stock].{StockDepo} = s|%s| " % record.StockDepo
            if itemrow.Pos: query.sql += "WHERE?AND [Stock].{StockPos} = s|%s| " % itemrow.Pos
            query.sql += "GROUP BY [Stock].{SerialNr} "
            if not itemrow.Pos: query.sql += ", [Stock].{StockPos} "
            query.sql += "HAVING {Qty} <> 0.0 "
            query.sql += " ORDER BY [bt].{BestBefore} ASC "
            if query.open():
                return query
        elif (pastewindowname == "PositionStockPasteWindow"):
            record = self.getRecord()
            itemrow = record.details(fieldname)[rownr]
            from Position import Position
            return Position.genPasteWindowData(itemrow.ArtCode, record.StockDepo, itemrow.SerialNr)
        elif pastewindowname == "XPasteWindow":
            record = self.getRecord()
            prow = record.details(fieldname)[rownr]
            from PayMode import PayMode
            from CredCardType import CredCardType
            pm = PayMode.bring(prow.PayMode)
            query = []
            if pm:
              ct = CredCardType.bring(pm.CredCardType)
              if ct:
                for srow in ct.SurChargeRows:
                    z = NewRecord("X")
                    z.Code = srow.Plan
                    from CredCardPlan import CredCardPlan
                    ccp = CredCardPlan.bring(srow.Plan)
                    if (ccp):
                        z.Name = ccp.Name
                    else:
                        z.Name = srow.Plan
                    query.append(z)
            return query
        return None

    def beforeInsertRow(self, dname, rownr):
        res = ParentInvoiceWindow.beforeInsertRow(self, dname, rownr)
        if (not res): return res
        if (dname == "Installs"):
            res = False
        return res

    def beforeDeleteRow(self, dname, rownr):
        res = ParentInvoiceWindow.beforeDeleteRow(self, dname, rownr)
        if (not res): return res
        if (dname == "Installs"):
            res = False
        elif (dname == "Payments"):
            #Para que se recalculen los recargos de tarjeta de credito
            invoice = self.getRecord()
            row = invoice.Payments[rownr]
            row.Paid = 0.0
            row.pastePaid(invoice)
            invoice.sumUp()
        return res

    def afterDeleteRow(self, fieldname, rownr):
        invoice = self.getRecord()
        if (fieldname == "Items"):
            if invoice.Installments:
                invoice.recalculateInstalls()
            invoice.sumUp()
        elif (fieldname == "Payments"):
            if invoice.Installments:
                invoice.recalculateInstalls()
            invoice.sumUp()
        elif (fieldname == "Taxes"):
            invoice.sumUp(genTaxes=False)
            if invoice.Installments:
                invoice.recalculateInstalls()

    def beforeEdit(self, fieldname):
        res = ParentInvoiceWindow.beforeEdit(self, fieldname)
        if res and fieldname == "PayTerm":
            record = self.getRecord()
            record.oldPayTerm = record.PayTerm
        return res

    def beforeEditRow(self, fname, rfname, rownr):
        res = ParentInvoiceWindow.beforeEditRow(self, fname, rfname, rownr)
        if (not res ):
            return res
        invoice = self.getRecord()
        if (fname == "Payments" ):
            if (rfname == "CreditCard"):
                paymentsrow = self.getRecord().Payments[rownr]
                pmode = paymentsrow.getPayModeRecord()
                if (pmode and pmode.PayType == 1):
                    cctype = pmode.CredCardType
                    from CreditCard import CreditCard
                    from CreditCardWindow import CreditCardWindow
                    from CreditCardWindow import CreditCardWindow
                    if (not paymentsrow.CreditCard):
                        from FinSettings import FinSettings
                        fs = FinSettings.bring()
                        if (fs and fs.UseMagneticReader):
                            ccdata = CreditCardWindow.getMagneticRead(CredCardType=cctype, \
                            CustCode=invoice.CustCode, CustName=invoice.CustName)
                            if (ccdata):
                                print ccdata
                                paymentsrow.CreditCard = ccdata["Code"]
        return True

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentInvoiceWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        from SalesSettings import SalesSettings
        sset = SalesSettings.bring()
        invoice = self.getRecord()
        if (fieldname == "Items"):
            invItem = invoice.Items[rownr]
            if (rowfieldname == "ArtCode"):
                artbefore = invItem.ArtCode
                invItem.showArtCodeWarning(invoice)
                invItem.pasteArtCode(invoice)
                if (artbefore<>invItem.ArtCode):    # fue codigo de barra o codigo alternativa
                    if not invItem.Qty: invItem.Qty = 1
                    invItem.pasteQty(invoice)
                    #if sset.EnableSalesInvoiceFastItemPaste:
                    invoice.setFocusOnField("Items","Qty",rownr) # salta una fila
                invItem.sumUp(invoice)
                invItem.findDiscount(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "Qty"):
                invItem.pasteQty(invoice)
                invItem.sumUp(invoice)
                invItem.findDiscount(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "Price"):
                invItem.pastePrice(invoice)
                invItem.sumUp(invoice)
                invItem.findDiscount(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "VATPrice"):
                invItem.pasteVATPrice(invoice)
                invItem.sumUp(invoice,True)   # pass inteligence that we came from the vat incl. price !
            elif (rowfieldname == "RowNet"):
                invItem.pasteRowNet(invoice)
                invoice.sumUp()
            elif (rowfieldname == "RowTotal"):
                invItem.pasteRowTotal(invoice)
                invoice.sumUp()
            elif (rowfieldname == "VATCode"):
                invItem.pasteVATCode(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "Discount"):
                invItem.pasteDiscount(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "Unit"):
                invItem.pasteUnit(invoice)
                invItem.sumUp(invoice)
            elif (rowfieldname == "SerialNr"):
                invItem.pasteSerialNr(invoice)
                invItem.sumUp(invoice)
                invoice.sumUp()
            else:
                return
            # Finish off with the sumUp !
            if invoice.Installments > 0:
                invoice.recalculateInstalls()
            #invItem.sumUp(invoice) not needed for recalculate Installs  in fact causes problems !
            invoice.sumUp()
        elif (fieldname == "Taxes"):
            if (rowfieldname == "Amount"):
                invoice.sumUp(genTaxes=False)
                if invoice.Installments:
                    invoice.recalculateInstalls()
        elif (fieldname == "Installs"):
            if (rowfieldname == "CapitalAmount"):
                insrow = invoice.Installs[rownr]
                insrow.pasteCapitalAmount(invoice)
                insrow.sumUp(invoice)
            elif (rowfieldname == "InterestAmount"):
                insrow = invoice.Installs[rownr]
                insrow.pasteInterestAmount(invoice)
                insrow.sumUp(invoice)
        elif (fieldname == "Payments"):
            paymentsrow = self.getRecord().Payments[rownr]
            if (rowfieldname == "PayMode"):
                paymentsrow.pastePayMode()
                from PayMode import PayMode
                pmode = PayMode()
                pmode = PayMode.bring(paymentsrow.PayMode)
                if (pmode):
                    if pmode.PayType != 1:
                        paymentsrow.CreditCard = ""
                    if (pmode.PayType != 2 and pmode.PayType !=7):
                        paymentsrow.ChequeNr = 0
                else:
                    paymentsrow.CreditCard = ""
                    paymentsrow.ChequeNr = 0
            elif (rowfieldname == "Paid"):
                paymentsrow.pastePaid(invoice)
            elif (rowfieldname == "ChequeNr"):
                paymentsrow.pasteChequeNr(invoice)
            elif (rowfieldname == "CreditCard"):
                pmode = paymentsrow.getPayModeRecord()
                if (pmode and pmode.PayType == 1):
                    cctype = pmode.CredCardType
                    from CreditCard import CreditCard
                    if (paymentsrow.CreditCard and not CreditCard.exists(paymentsrow.CreditCard)):
                        from CreditCardWindow import CreditCardWindow
                        #Llama al asistente de creaci?n de tarjetas de Cr?dito.
                        ccdata = CreditCardWindow.assistedCreditCardCreator(CredCardType=cctype, \
                            Number=paymentsrow.CreditCard,CustCode=invoice.CustCode, CustName=invoice.CustName)
            elif (rowfieldname == "Plan"):
                paymentsrow.pastePlan(invoice)
            elif (rowfieldname == "Installments"):
                paymentsrow.pasteInstallments()
            else:
                return
            #SI SE ACTIVA ESTO EST? PROVOCANDO QUE EN UNA FACTURA CON CUOTAS NO SE PUEDAN AGREGAR PAGOS PARCIALES.
            # Finish off with the sumUp !
            invoice.sumUp()
            if invoice.Installments:
              invoice.recalculateInstalls()

    def buttonClicked(self, buttonname):
        ParentInvoiceWindow.buttonClicked(self, buttonname)
        invoice = self.getRecord()
        if buttonname =="openCoupons":
            invoice.getCoupons()
        elif buttonname == "pasteSerials":
            invoice.fillSerials()
        elif buttonname == "applyOnAccValueFromCust":
            invoice.applyOnAccValueFromCust()

    @checkTransactionForAction
    def genCreditNote(self):
        inv = self.getRecord()
        if (inv.isModified() or inv.isNew()):
            message(tr("You need to save the current record first!"))
            return False
        if (not inv.confirmed()):
            message("ONLYALLOWED4APPROVEDTRANS")
            return False
        creditnote = inv.genCreditNote()
        if not creditnote:
            if creditnote != "":
                message(creditnote)
            return
        creditnote.openInWindow()
        self.closeAfterGen()

    @checkTransactionForAction
    def genJudicialCase(self):
        inv = self.getRecord()
        jc = inv.genJudicialCase()
        if not jc:
           message(jc)
           return
        from JudicialCaseWindow import JudicialCaseWindow
        cnwindow = JudicialCaseWindow()
        cnwindow.setRecord(jc)
        cnwindow.open()

    def getInvoiceStatus(self):
        record = self.getRecord()
        if (not record.confirmed()):
            message(tr("Transactions without approval do not have a Status"))
            return
        from InvoiceStatus import InvoiceStatus
        report = InvoiceStatus()
        report.InvoiceNr = record.SerNr 
        report.open(False)

    def showInvoiceItemSearch(self):
        from InvoiceItemSearch import InvoiceItemSearch
        report = InvoiceItemSearch()
        report.invoice = self.getRecord()
        report.open()

    def sortItemRows(self):
        inv = self.getRecord()
        if not inv.confirmed():
            inv.sortItems()
        else:
            message(tr("Only Unapproved"))

    def splitItemRow(self):
        inv = self.getRecord()
        if not inv.Status and not inv.Invalid:
            if (self.currentField() == "Items"):
                matrixname = self.currentMatrixName()
                crow = self.currentRow(matrixname)
                qty = int(getValue(tr("Quantity")+":",1))
                itemrow1 = inv.Items[crow]
                itemrow2 = itemrow1.clone()
                itemrow1.Qty = itemrow1.Qty - qty
                itemrow2.Qty = qty
                itemrow1.sumUp(inv)
                itemrow2.sumUp(inv)
                inv.Items.append(itemrow2)
    
    def authorize(self):
        inv = self.getRecord()
        return inv.authorize()

    def showItemStatusReport(self):
        fn = self.currentField()
        if fn == "Items":
            matrixname = self.currentMatrixName()
            if matrixname:
                rownr = self.currentRow(matrixname)
                if rownr >= 0:
                    artcode = self.getRecord().Items[rownr].ArtCode
                    if artcode:
                        from ItemStatusReport import ItemStatusReport
                        report = ItemStatusReport()
                        report.getRecord().ArtCode = artcode
                        report.open(False)

    """    if it is necesary to include this action into an access group.
    def canAuthorize(self):
        from User import User
        user = User.bring(currentUser())
        if user:
            return user.canDo("CanAuthorizeInvoices")
        return True
    """

    def makePaymentReceipt(self):
        inv = self.getRecord()
        receipt = inv.makePaymentReceipt()
        if (receipt):
            receipt.openInWindow()

    def printInstallmentsCheckBook(self):
        printDocument("InvoiceCheckBookDoc", "InvoiceDoc", self.getRecord(), True, True, None)

    def printInvoiceDraft(self):
        inv = self.getRecord()
        inv.isDraftTransaction = True
        from SalesSettings import SalesSettings
        ss = SalesSettings.bring()
        if (ss):
            if (ss.DraftInvDoc):
                printDocument(ss.DraftInvDoc,"DraftInvoice",inv,True, True, None)
            else:
                message("There Is No Draft Document Defined")

    def balance(self):
        inv = self.getRecord()
        if inv.Status == 1 or inv.Invalid:
            return
        if inv.Payments:
            tpaid = reduce(lambda x,y: x+y,[prow.Paid for prow in inv.Payments])
        else:
            tpaid = 0
        if (tpaid<>inv.Total):
           inv.payInvoiceAmounts(inv.Total-tpaid)
        inv.sumUp()

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "Payments"):
            if (rowfieldname == "Plan"):
                #from SalesSettings import SalesSettings
                #sset = SalesSettings.bring()
                #if (sset.UseInstallemntsOneCupon):
                return  "CredCardPlanPasteWindow"
            elif (rowfieldname == "ChequeNr"):
                irow = record.Payments[rownr]
                ptype = getMasterRecordField("PayMode","PayType",irow.PayMode)
                if (ptype == 1):
                    return "CouponPasteWindow"
                elif (ptype == 2):
                    return "ChequePasteWindow"
                elif (ptype == 13):
                    return  "LetterPasteWindow"
        return ParentInvoiceWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)


    def recalcGP(self):
        record = self.getRecord()
        res = record.recalcGP()

    def separator(self):
        pass

    ################TICKET PRINTER################
    def sendPrintTicket(self):
        inv = self.getRecord()
        if inv.canBePrinted():
            from TicketPrinter import TicketPrinter
            tp = TicketPrinter.configureOpenPort()
            if tp:
                newinv = inv.printingFormat()
                tp.printInvoice(newinv)
                tp.showMessages()
                inv.afterPrint(None)

    def sendPrintNonFiscalInvoice(self):
        #Faltaba el m?todo pero no se encuentra por ning?n archivo.
        pass

    def applyPromotions(self):
        from PromotionPlan import PromotionPlan
        record = self.getRecord()
        if record.confirmed():
            return message(ErrorResponse('No se pueden aplicar promociones, la Factura se encuentra Aprobada'))
        couponPromotions = PromotionPlan.getCouponPromotions()
        couponPromotionTitles = map(lambda r: "%s|%s" % (r.Code, r.Comment), couponPromotions)
        noCouponText = tr("No")
        selectedCoupons = []
        while couponPromotionTitles:
            res = getSelection(tr("Coupon"), tuple([noCouponText] + couponPromotionTitles))
            if not res:
                return
            elif res == noCouponText:
                break
            else:
                selectedCoupons.append(res.split("|")[0])
                couponPromotionTitles.remove(res)    
        record.applyPromotions(selectedCoupons)

    def makeUBL(self):
        pass
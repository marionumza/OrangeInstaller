#encoding: utf-8
from OpenOrange import *
import ListViewItem

ParentGroupWindow = SuperClass("GroupWindow","MasterWindow",__file__)
class GroupWindow(ParentGroupWindow):

    def afterEdit(self, fieldname):
        record = self.getRecord()
        if (fieldname == "Tables"):
            try:
                record.updateSQL()
            except KeyError, err:
                message("El campo " + str(err) + " no existe")
            except IndexError:
                from string import find,rfind
                #Cuando la tabla no existe se eleva IndexError por la forma del algoritmo,
                #y por la misma, sql queda cargada en último lugar con FROM "tablamal"\nWHERE
                #de forma que con las llamadas de abajo puedo indicar exactamente cual es la tabla
                #que no existe
                sql = record.SQL
                ind = rfind(sql, "FROM") + 5
                eind = find(sql, "\n", ind)
                message("La tabla " + sql[ind:eind] + " no existe")
        if fieldname == "Code":
            pass

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        record = self.getRecord()
        if (fieldname == "GroupRuleRows"):
            try:
                record.updateSQL()
            except KeyError, err:
                message("El campo " + str(err) + " no existe")
            except IndexError:
                from string import find,rfind
                #Cuando la tabla no existe se eleva IndexError por la forma del algoritmo,
                #y por la misma, sql queda cargada en último lugar con FROM "tablamal"\nWHERE
                #de forma que con las llamadas de abajo puedo indicar exactamente cual es la tabla
                #que no existe
                sql = record.SQL
                ind = rfind(sql, "FROM") + 5
                eind = find(sql, "\n", ind)
                message("La tabla " + sql[ind:eind] + " no existe")
        elif (fieldname == "GroupMembersRows"):
            if (rowfieldname == "TableTitle"):
                info = getWindowsInfo()
                row = record.GroupMembersRows[rownr]
                tableTitle = info[row.TableTitle + "Window"]["Title"]
                row.TableName = row.TableTitle
                row.TableTitle = tableTitle
            elif (rowfieldname == "Code"):
                record.pasteMember(rownr)

    def afterDeleteRow(self, detailName, rownr):
        ParentGroupWindow.afterDeleteRow(self, detailName, rownr)
        record = self.getRecord()
        if (detailName == "GroupRuleRows"):
            record.updateSQL()

    def buttonClicked(self, buttonname):
        if buttonname == "loadAddMembersView":
            self.loadMembersList()
            self.loadAddMembersView()

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "GroupMembersRows"):
            row = record.GroupMembersRows[rownr]
            if(rowfieldname == "Code"):
                if (row.TableName):
                    pwindow = row.TableName + "PasteWindow"
                    return pwindow
                else:
                    return None
            else:
                return "GroupTablePasteWindow"
        return ParentGroupWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)

    def fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr):
        if (pastewindowname == "GroupTablePasteWindow"):
            info = getWindowsInfo()
            from GroupTable import GroupTable
            l = []
            for table in info.keys():
                gt = GroupTable()
                gt.TableName = info[table]["RecordName"]
                gt.TableTitle = info[table]["Title"]
                l.append(gt)
            l.sort(None, lambda x: x.TableTitle)
            return l

    def afterShowRecord(self):
        ParentGroupWindow.afterShowRecord(self)

    def getMemberList(self, groupResult):
        memberList = []
        #Search into memberlist and query
        for member in groupResult.Members:
            memberList.append(member.Code)
        return memberList

    def loadAddMembersView(self):
        if not hasattr(self, 'membersNotInGroup'): return
        #Get ListWindows Fields Name
        lwinfo = getListWindowsInfo()
        lwname = filter(lambda x: lwinfo[x]["RecordName"] == self.getRecord().Tables, lwinfo.keys())[0]

        listview = self.getListView("AddMembersView")
        listview.clear()
        listview.setColumns(map(lambda x: x["Label"], lwinfo[lwname]["Columns"]))
        for member in self.membersNotInGroup:
            item = GroupViewItem(listview)
            item.window = self
            item.record = self.getRecord()
            item.originrow = member
            item.table = self.getRecord().Tables
            item.internalId = member.internalId
            item.fields = self.fields
            l = []
            for fn in self.fields:
              l.append(member.fields(fn).getValue())
            item.setText(l)

    def loadMembersList(self):
        recwin = self.getRecord()
        if not self.getRecord().Tables: return
        #Get ListWindows Fields Name
        lwname = filter(lambda x: getListWindowsInfo()[x]["RecordName"] == self.getRecord().Tables, getListWindowsInfo().keys())[0]
        if not hasattr(self, 'membersNotInGroup'): self.membersNotInGroup = []
        groupResult = self.getRecord().getGroup()
        memberList = self.getMemberList(groupResult)
        self.fields = map(lambda x: x["FieldName"], getListWindowsInfo()[lwname]["Columns"])
        record = NewRecord(self.getRecord().Tables)
        q = Query()
        q.sql = "SELECT internalId, %s FROM %s " % (", ".join(self.fields), self.getRecord().Tables)
        if len(memberList): 
            q.sql += " WHERE?AND %s NOT IN (%s) " % (record.uniqueKey()[0], "s|" + "|,s|".join (memberList) +"|") #elimino los ya existentes
        if (recwin.SearchName):
            q.sql += " WHERE?AND LOWER(Name) LIKE s|%%%s%%| " %(recwin.SearchName.lower())
        if (recwin.SearchLastName):
            q.sql += " WHERE?AND LOWER(LastName) LIKE s|%%%s%%| " %(recwin.SearchLastName.lower())
        if (recwin.SearchCustCode):
            q.sql += " WHERE?AND CustCode = s|%s| " %(recwin.SearchCustCode)
        #alert("\n".join(dir(self.membersNotInGroup)))
        for idx in range(len(self.membersNotInGroup)):
            self.membersNotInGroup.pop()
        if q.open():
            #alert(q.sql)
            for rec in q:
                self.membersNotInGroup.append(rec)

    def removeMember(self, code):
        for rec in self.membersNotInGroup:
            if rec.Code == code:
                self.membersNotInGroup.remove(rec)
                return

    def showGroupReport(self):
        from Report import Report
        from GroupListing import GroupListing
        report = GroupListing()
        report.getRecord().Group = self.getRecord().Code
        report.open(False)

class GroupViewItem(ListViewItem.ListViewItem):

    def selected(self):
        from GroupMembersRow import GroupMembersRow
        gmr = GroupMembersRow()
        gmr.defaults()
        gmr.TableName = self.table
        gmr.TableTitle = tr(self.table)
        gmr.Code = self.originrow.Code
        gmr.Id = self.internalId
        if hasattr(self.originrow, 'Name'): gmr.Name = self.originrow.Name
        if hasattr(self.originrow, 'LastName'): gmr.Name += " " + self.originrow.LastName
        self.record.GroupMembersRows.append(gmr)
        self.window.removeMember(self.originrow.Code)

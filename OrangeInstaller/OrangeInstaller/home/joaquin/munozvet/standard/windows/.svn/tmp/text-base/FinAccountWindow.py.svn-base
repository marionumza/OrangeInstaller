#encoding: utf-8
from OpenOrange import *

ParentFinAccountWindow = SuperClass("FinAccountWindow","MasterWindow",__file__)
class FinAccountWindow(ParentFinAccountWindow):

    def getBasePrice(self):
        self.getRecord().getBasePrice()

    def beforeEdit (self, fieldname):
        res = ParentFinAccountWindow.beforeEdit(self, fieldname)
        if not res: return res
        self.modified = self.getRecord().isModified()
        return True

    def afterEdit(self, fieldname):
        ParentFinAccountWindow.afterEdit(self, fieldname)
        fa = self.getRecord()
        if fieldname == "StartDate":
            fa.Reconciliation = fa.StartDate.strftime("%m%y")
            fa.EndDate = EndOfMonth(fa.StartDate)
            fa.setModified(self.modified)
        elif fieldname == "EndDate":
            fa.setModified(self.modified)
        elif fieldname == "Bank":
            fa.pasteBank()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentFinAccountWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        rec = self.getRecord()
        if (fieldname == "ExtractRows"):
            exrow = rec.ExtractRows[rownr]
            if (rowfieldname == "BankAccNr"):
                exrow.pasteBankAccNr()
            elif (rowfieldname == "Comment"):
                exrow.pasteComment()

    def genChequera(self):
        finacc = self.getRecord()
        from GenerateChequeBook import GenerateChequeBook
        gcbook = GenerateChequeBook()
        gcbook.open()
        gcbook.getRecord().BankAcc = finacc.Account
        gcbook.getRecord().Type = 2

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "ExtractRows"):
            row = record.ExtractRows[rownr]
            if(rowfieldname == "Entity"):
                if (row.EntityType == 0):
                    return "SupplierPasteWindow"
                elif (row.EntityType == 1):
                    return "CustomerPasteWindow"
                elif (row.EntityType == 2):
                    return "PersonPasteWindow"
        return ParentFinAccountWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)

    def openReconcile(self):
        fa = self.getRecord()
        self.openReconcileReport(fa)

    def openReconcileReport(self,record,view=None):
        from ReconcileList import ReconcileList
        report = ReconcileList()
        report.defaults()
        if not record.Reconciliation: return
        if view: report.setView(view)
        report.getRecord().StartDate  = record.StartDate
        report.getRecord().EndDate    = record.EndDate
        report.getRecord().Account    = record.Account
        report.getRecord().Currency   = record.Currency
        report.getRecord().FinAccount = record.Code
        report.getRecord().ShowRecon = record.ShowRecon
        report.getRecord().showCheques = record.ShowCheque
        report.getRecord().showReference = record.ShowReference
        report.getRecord().OrderBy = record.OrderBy
        
        report.ShowReportTitle = False
        report.getRecord().Reconciliation = record.Reconciliation
        report.getRecord().NLTComment = record.NLTComment
        report.Reconciliation = record.Reconciliation
        report.fa = record
        report.open(False)

    def buttonClicked(self, buttonname):
        if buttonname == "reconcile":
            view = self.getReportView("FinAccount")
            record = self.getRecord()
            if record.fields("StartDate").isNone():
                message(tr("NONBLANKERR"))
                #return record.FieldErrorResponse("","StartDate") #esto solo se corre en Check
            self.openReconcileReport(record,view)
        elif buttonname == "automaticReconcilation":
            from ReconcilationWindow import ReconcilationWindow
            from Reconcilation import Reconcilation
            record = self.getRecord()
            r = Reconcilation ()
            r.FinAccountCode = record.Code
            w = ReconcilationWindow()
            w.setRecord(r)
            w.open()
        elif buttonname == "goToWeb":

            record = self.getRecord()
            import webbrowser
            webbrowser.open(record.www)
        elif buttonname == "processextract":
            record = self.getRecord()
            record.process()

    def genBankfile(self):
        specs = self.getRecord()
        from BankExport import BankExport
        routine = BankExport()
        routine.getRecord().StartDate   = specs.StartDate
        routine.getRecord().EndDate     = specs.EndDate
        routine.getRecord().PresentDate  = today()
        routine.getRecord().lista        = 2
        routine.getRecord().BankAccount  = specs.Code
        routine.getRecord().PayMode      = specs.PayMode
        routine.getRecord().BankSucDist  = specs.BankBranch
        routine.open(False)

    def isOwnCheque(self,descrip):
        finacc = self.getRecord()
        tipos = ["CHEQUE GALICIA","CHEQUE 48 HS."]
        for tipo in tipos:
          n = len(tipo)
          if (descrip[0:n]==tipo):
            return True
        return False

    def getLastReconcileNr(self):
        query = Query()
        query.sql  = "SELECT MAX({ReconcileNr}) AS Maxim "
        query.sql += "FROM [OwnCheque] "
        if(query.open()):
          if len(query)>0:
            return (query[0].Maxim)
          else:
            return 1

    def clearingReport(self):
        from OwnChequesList import OwnChequesList
        report = OwnChequesList()
        record = self.getRecord()
        specs = report.getRecord()
        specs.StartDate  = record.StartDate
        report.open(False)

    def missingChequeReport(self):
        from MissingChequeList import MissingChequeList
        record = self.getRecord()
        report = MissingChequeList()
        report.fa = record
        report.FromDate,report.ToDate  = record.StartDate,record.EndDate,
        report.open(False)

    def importBankfile (self):
        from Bank import Bank
        from PurchaseInvoiceWindow import PurchaseInvoiceWindow
        from FinAccount import FinAccount
        filename = getOpenFileName()
        if not filename: return
        finAcc = self.getRecord()
        if not finAcc.Reconciliation or not finAcc.EndDate:
            message (tr("NONBLANKERR") + ": " + tr("StartDate") + ", " + \
                tr("EndDate")+".")
            return
        code = finAcc.Code
        reconCode = finAcc.Reconciliation
        account = finAcc.Account
        supCode = finAcc.SupCode
        toDate = finAcc.EndDate
        bnk = Bank.bring(finAcc.Bank)
        pi,recLines=bnk.processBankExtract \
            (filename, supCode, reconCode, code, account, toDate)
        if recLines.save ():
            commit ()
        else:
            message ("No puedo guardar Lineas de extracto")
            log ("No puedo guardar Lineas de extracto")
        piw = PurchaseInvoiceWindow ()
        piw.setRecord (pi)
        piw.open ()

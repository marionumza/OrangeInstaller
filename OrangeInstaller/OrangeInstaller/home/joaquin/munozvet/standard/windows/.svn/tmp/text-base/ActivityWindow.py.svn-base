#encoding: utf-8
from OpenOrange import *
from GlobalTools import *

ParentActivityWindow = SuperClass("ActivityWindow","NumerableWindow",__file__)
class ActivityWindow(ParentActivityWindow):

    def getTitle(self):
        title = ParentActivityWindow.getTitle(self)
        record = self.getRecord()
        if record and record.OriginRecordName:
            title += ' [%s %s]' %  (tr(record.OriginRecordName), record.OriginId)
        return title

    def afterEdit(self, fieldname):
        ParentActivityWindow.afterEdit(self,fieldname)
        record = self.getRecord()
        if (fieldname == "CustCode"):
            record.pasteCustCode()
        elif (fieldname == "CustName"):
            if (not record.CustCode):
                from NameSearchResult import NameSearchResult
                NameSearchResult.search("Customer",self.getRecord().CustName,self)
        elif (fieldname == "StartDate"):
            record.pasteStartDate()
        elif (fieldname == "StartTime"):
            record.pasteStartTime()
        elif (fieldname == "EndDate"):
            record.pasteEndDate()
        elif (fieldname == "EndTime"):
            record.pasteEndTime()
        elif (fieldname == "Duration"):
            record.pasteDuration()
        elif (fieldname == "DurationDays"):
            if record.DurationDays < 0: record.DurationDays = 0
            record.pasteDuration()
        elif fieldname == "RecurrentAlert":
            record.Alerted = 0
        elif fieldname == "ActivateAlert":
            record.Alerted = 0
        elif fieldname == "ContactCode":
            record.pasteContactName()
        elif fieldname == "ActivityType":
            record.pasteActivityType()
        record.showMessages()

    def getPasteWindowName(self,fieldname):
        record = self.getRecord()
        if(fieldname == "Users"):
          from PersonPaste import PersonPaste
          report = PersonPaste()
          report.record = record
          specs = report.getRecord()
          report.open(False)
          return ""
        return ParentActivityWindow.getPasteWindowName(self,fieldname)

    def afterEditRow(self,fieldname,rowfieldname,rownr):
        ParentActivityWindow.afterEditRow(self,fieldname,rowfieldname,rownr)
        record = self.getRecord()
        if (rowfieldname == "TaskCode"):
            record.pasteTaskComment(rownr)

    def genVoucher(self):
        pass
        #if self.getRecord().SerNr == 0:
            #message(tr("You need to save the current record first!"))
        #else:
            #vr = self.getRecord().genVoucher()
            #for vlist in vr:
                #from VoucherWindow import VoucherWindow
                #vrw = VoucherWindow()
                #vrw.setRecord(vlist)
                #vrw.open()

    def genOpportunity(self):
        opportunity = self.getRecord().genOpportunity()
        if opportunity:
            from OpportunityWindow import OpportunityWindow
            opportunityw = OpportunityWindow()
            opportunityw.setRecord(opportunity)
            opportunityw.open()
        else:
            message(opportunity)
        return opportunity

    def listVoucher(self):
        from VoucherList import VoucherList
        report = VoucherList()
        report.getRecord().ActivityId = self.getRecord().SerNr
        report.open(False)

    def save(self):
        record = self.getRecord()
        ParentActivityWindow.save(self)
        if record.confirmed():                          # confirming() doesnt work here!
            from CRMSettings import CRMSettings
            cset = CRMSettings.bring()
            if cset.OpenActonActApp:
              newact = record.clone()
              newact.SerNr = None
              newact.Status = 0
              #newact.afterCopy()    # deletes the origin              
              newact.openInWindow()


    def showStatus(self):
        from ActivityStatus import ActivityStatus
        report = ActivityStatus()
        report.ActNr = self.getRecord().SerNr
        report.open(False)

    def showOriginRecord(self):
        record = self.getRecord()
        if record.OriginRecordName:
            windowsinfo = getWindowsInfo()
            windownames = [x for x in windowsinfo.keys() if (windowsinfo[x]["RecordName"] == record.OriginRecordName)]
            #filter(lambda x: (windowsinfo[x]["RecordName"] == record.OriginRecordName), windowsinfo.keys())
            if len(windownames):
                rec = NewRecord(record.OriginRecordName)
                rec.setPortableId(record.OriginId)
                if rec.load():
                    windowname = windownames[0]
                    if record.OriginRecordName in getRecordsInfo().keys():
                        exec("from %s import %s" % (windowname, windowname))
                        exec("wnd = %s()" % windowname)
                        wnd.setRecord(rec)
                        wnd.open()

    def splitActivity(self):
        record = self.getRecord()
        record.splitHours()

    def sendToGoogleCalendar(self):
        act = self.getRecord()
        from GoogleCalendar import GoogleCalendar
        from MailAccount import MailAccount
        from SystemSettings import SystemSettings
        ss = SystemSettings.bring()
        persons = act.Users.split(",")
        for person in persons:
            ma = MailAccount()
            ma.User = person
            if ma.load():
                gc = GoogleCalendar(ma.GoogleUser,decode(ma.GooglePassword))
                startd =  datetime(act.StartDate.year,act.StartDate.month,act.StartDate.day,act.StartTime.hour + ss.TimeDiffToGoogle,act.StartTime.minute,0) #tzinfo=UTC
                endd   = datetime(act.EndDate.year,act.EndDate.month,act.EndDate.day,act.EndTime.hour + ss.TimeDiffToGoogle,act.EndTime.minute,0) #tzinfo=UTC
                s = startd.strftime('%Y-%m-%dT%H:%M:%S.000Z')
                e = endd.strftime('%Y-%m-%dT%H:%M:%S.000Z')
                gc.insertActivity(title=act.Comment,content=act.Detail, where='',start_time=s, end_time=e)
            else:
                message("You Have no MailAccount for This Action")
                return

    def filterPasteWindow(self, fieldname):
        res = ParentActivityWindow.filterPasteWindow(self, fieldname)
        if (res): return res
        act = self.getRecord()
        if fieldname == "ActivityType":
            res = "IFNULL({Level},0) = i|0| "
        elif fieldname == "ActivitySubType":
            at = act.getActivityTypeRecord()
            if (at):
                codes = map(lambda st:st.Type,at.SubTypes)
                res = " {Level} = i|1| AND {Code} IN ('%s') " %("','".join(codes))
            else:
                res = "{Level} = i|1| "
        elif fieldname == "ContactCode":
            if act.CustCode:
                from Person import Person
                res = "{CustCode} = s|%s| AND {ContactType} = i|%s| " %(act.CustCode,Person.CUSTOMER)
        return res

    #def fillPasteWindow(self, pastewindowname, fieldname):
    #    if fieldname == "ActivitySubType":
    #        from ActivityType import ActivityType
    #        acttype = ActivityType.bring(self.getRecord().ActivityType)
    #        if acttype and acttype.SubTypes.count() > 0:
    #            res = []
    #            for row in acttype.SubTypes:
    #                ast = ActivityType.bring(row.Type)
    #                if ast.Level == 1: res.append(ast)
    #            return res

    def sendMail(self):
        record = self.getRecord()
        from Mail import Mail
        from MailWindow import MailWindow
        mail = Mail()
        mail.defaults()
        try:
            mail.OriginId = record.getPortableId()
            mail.OriginRecordName = record.name()
        except:
            pass
        res = mail.save() # i save the record here, because importHTML method needs internalId value defined.
        if not res:
            message(res)
            return
        mail.importHTML(record.getHTML())
        commit()
        mail.EntityType = 0
        mail.CustCode = record.CustCode
        mail.pasteCustCode()
        
        mail.Subject = "%s %i" % (record.getTitle(),record.SerNr)
        res = mail.save()
        fname = record.asICalendar()
        res = mail.attachFile(fname)
        from Person import Person
        pers = Person.bring(record.ContactCode)
        maddr = None
        if pers:
            maddr = pers.getMail()
        if (not maddr):
            from Customer import Customer
            cust = Customer.bring(record.CustCode)
            if (cust and cust.Email):
                 maddr = cust.Email
        mail.MailTo = maddr
        persons = record.Users.split(",")
        from MailAccount import MailAccount
        persons = record.Users.split(",")
        ccs = []
        for person in persons:
            ma = MailAccount.bring(person)
            if ma:
              ccs.append(ma.Mail)
        if (ccs): mail.MailCc = ",".join(ccs)
        res = mail.save()
        commit()
        mail.openInWindow()

    def buttonClicked(self, bname):
        record = self.getRecord()
        if (bname == "autoplan"):
            record.automaticPlanning()
        elif (bname == "openOrigin"):
            self.showOriginRecord()
        else:
            ParentActivityWindow.buttonClicked(self, bname)

    def linkToQuote(self):
        record = self.getRecord()
        cuser = currentUser()
        from Quote import Quote
        cquery = Query()
        cquery.sql  = "SELECT [Q].{SerNr}, [Q].{TransDate}, [Q].{CustName}, [Q].{Comment} "
        cquery.sql += "FROM [Quote] Q "
        #cquery.sql += "WHERE (Q.SalesMan = s|%s|) " %(record.Users)
        cquery.sql += "WHERE ([Q].{CustCode} = s|%s|) " %(record.CustCode)
        cquery.sql += "AND [Q].{Status} IN (i|%s|, i|%s|, i|%s|) " %(Quote.OPEN, Quote.BEINGNEGOC, Quote.ACCEPTED)
        cquery.sql += "ORDER BY [Q].{TransDate} DESC "

        if (cquery.open()):
            clist = []
            for cline in cquery:
                clist.append("%s|%s|%s|%s" %(cline.SerNr,cline.TransDate.strftime("%d/%m/%Y"),cline.CustName,"%s" % {True: cline.Comment[:37] + "...", False: cline.Comment}[len(cline.Comment) > 40]))
            res = getSelection("Select", tuple(clist))
            if (res):
                sernr,transdate,custname,comment = res.split("|")
                record.OriginRecordName = "Quote"
                record.OriginId = sernr

    def linkToStory(self):
        record = self.getRecord()
        cquery = Query()
        cquery.sql = "SELECT [S].{SerNr}, [S].{TransDate}, [S].{Name} "
        cquery.sql += " FROM [Story] S "
        cquery.sql += "INNER JOIN [Person] P ON [P].{Code} = [S].{OwnedBy} "
        cquery.sql += "INNER JOIN [User] U ON [U].{Person} = [P].{Code} "
        cquery.sql += "WHERE?AND [S].{Status} IN (0,1,2) "
        cquery.sql += "WHERE?AND [U].{Code} = s|%s| " % record.Users
        
        
        if(cquery.open()):
            clist = []
            for cline in cquery:
                clist.append("%s|%s|%s" %(cline.SerNr,cline.TransDate.strftime("%d/%m/%Y"),cline.Name))
            res = getSelection("Select", tuple(clist))
            if(res):
                sernr,transdate,name = res.split("|")
                if (sernr != "*"):
                    record.OriginRecordName = "Story"
                    record.OriginId = sernr
    
    
    def linkToCase(self):
        record = self.getRecord()
        cquery = Query()
        cquery.sql  = "SELECT C.SerNr, C.TransDate, C.CustName "
        cquery.sql += "FROM [Case] C "
        cquery.sql += "WHERE (C.Status = 0) "
        cquery.sql += "AND (%s)" %(makeSetFieldFilter("C","Asignee",record.Users))

        if (cquery.open()):
            clist = []
            for cline in cquery:
                clist.append("%s|%s|%s" %(cline.SerNr,cline.TransDate.strftime("%d/%m/%Y"),cline.CustName))
            clist.append("*|%s|*" %(tr("Other")))
            res = getSelection("Select", tuple(clist))
            if (res):
                sernr,transdate,custname = res.split("|")
                if (sernr != "*"):
                    record.OriginRecordName = "Case"
                    record.OriginId = sernr
                else:
                    res = getString("%s?" %(tr("Case")),record.OriginId)
                    if (res):
                        record.OriginRecordName = "Case"
                        record.OriginId = res
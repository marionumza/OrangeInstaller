#encoding: utf-8
from OpenOrange import *
from ChequeTraceReport import *

ParentChequeWindow = SuperClass("ChequeWindow","NumerableWindow",__file__)
class ChequeWindow(ParentChequeWindow):

    def afterEdit(self, fieldname):
        ParentChequeWindow.afterEdit(self, fieldname)
        record = self.getRecord()
        if (fieldname == "CustCode"):
          record.pasteCustCode()
        elif (fieldname == "Bank"):
            record.pasteBank()
        elif (fieldname == "ChequeNr"):
            record.pasteChequeNr()
        elif (fieldname == "ExpDate"):
            record.pasteExpDate()
        elif (fieldname == "Region"):
            record.pasteClearing()
        elif (fieldname == "BarCode"):
            record.pasteBarCode()
        elif (fieldname == "Type"):
            record.pasteType()
        elif (fieldname == "Amount"):
            record.Saldo = record.Amount

    def openReceipt(self):
        chq = self.getRecord()
        from Receipt import Receipt
        from ReceiptWindow import ReceiptWindow
        r = chq.getReceipt()
        if r:
            wnd = ReceiptWindow()
            wnd.setRecord(r)
            wnd.open()
        else:
           message(tr("Record not found!"))
           return

    def renovateBillofExchange(self):
        chq = self.getRecord()
        from IOURenovation import IOURenovation
        ioureno = IOURenovation()
        ioureno.OldCheque = chq.SerNr
        if not ioureno.load():
            newchq = chq.clone()
            newchq.SerNr = None
            res = newchq.save()
            if res:
              ioureno.defaults()
              ioureno.CustCode = chq.CustCode
              ioureno.pasteCustCode()
              ioureno.OldCheque = chq.SerNr
              ioureno.OldChqAmount = chq.Amount
              ioureno.NewCheque = newchq.SerNr
              ioureno.NewChqAmount = chq.Amount
              commit()
            else:
              rollback()
        ioureno.openInWindow()


    def openEndorsedPayment(self):
        chq = self.getRecord()
        from Payment import Payment
        from PaymentWindow import PaymentWindow
        r = chq.getPayment()
        if r:
            wnd = PaymentWindow()
            wnd.setRecord(r)
            wnd.open()
        else:
           message(tr("Record not found!"))
           return

    def openDeposit(self):
        chq = self.getRecord()
        from Deposit import Deposit
        from DepositWindow import DepositWindow
        r = chq.getDeposit()
        if r:
            wnd = DepositWindow()
            wnd.setRecord(r)
            wnd.open()
        else:
           message(tr("Record not found!"))
           return

    def openCaution(self):
        chq = self.getRecord()
        from ChequeCaution import ChequeCaution
        from ChequeCautionWindow import ChequeCautionWindow
        r = chq.getCaution()
        if r:
            wnd = ChequeCautionWindow()
            wnd.setRecord(r)
            wnd.open()
        else:
           message(tr("Record not found!"))
           return

    def cancelCheque(self):
        chq = self.getRecord()
        if (chq.Status == 4):
           message("El cheque nro %s ya se encuentra anulado" % (self.getRecord().SerNr))
           return
        chq.Status = 4
        res = chq.store()
        if not res:
            message(res)
        else:
            commit()

    def showChequeTrace(self):
        report = ChequeTraceReport ()
        report.defaults()
        report.getRecord().FromDate = date(1900,1,1)
        report.getRecord().ToDate = today()
        report.getRecord().ChequeNr = self.getRecord().ChequeNr
        report.open(False)

    def fieldIsEditable(self, fname, rfname=None, rownr=None):
        res = ParentChequeWindow.fieldIsEditable(self, fname, rfname, rownr)
        if (not res): return res
        if (fname == "TransDate" and not currentUserCanDo("CanModifyChequeTransDate")):
            return False
        return res

    def filterPasteWindow(self, fieldname):
        res = ParentChequeWindow.filterPasteWindow(self, fieldname)
        record = self.getRecord()
        if (fieldname == "Contact"):
            from Person import Person
            return "{ContactType} = i|%s| AND {CustCode} = s|%s| " %(Person.CUSTOMER,record.CustCode)
        return res
#encoding: utf-8
from OpenOrange import *

ParentPriceLoadWindow = SuperClass("PriceLoadWindow","Window",__file__)
class PriceLoadWindow(ParentPriceLoadWindow):

    MATRIX_COLOR = {True: "green", False: "white"}

    def afterShowRecord(self):
        ParentPriceLoadWindow.afterShowRecord(self)
        record = self.getRecord()
        if not record.PriceList:
            record.defaults()
        self.setMatrixColor()

    def afterEdit(self, fieldname):
        ParentPriceLoadWindow.afterEdit(self, fieldname)
        record = self.getRecord()
        if fieldname != "AutomaticSave": #Ãšnico campo que no es filtro 
            if fieldname == "Page":
                record.pastePage()
            elif fieldname == "PriceList":
                record.pastePriceList()
            else:
                record.pasteFilter(fieldname)
            self.setMatrixColor()
        record.setModified(False)

    def checkLeavePage(self):
        res = True
        if self.getRecord().changesLostIfLeavePage():
            res = askYesNo(tr("Changes Are Not Saved. Leave Page Anyway?"))
        return res

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentPriceLoadWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        if fieldname == "Items":
            record = self.getRecord()
            row = record.Items[rownr]
            if rowfieldname == "Price":
                row.pastePrice()
            elif rowfieldname == "MarkUp":
                row.pasteMarkUp()
            
    def buttonClicked(self, buttonname):
        ParentPriceLoadWindow.buttonClicked(self, buttonname)
        record = self.getRecord()
        if buttonname == "previousPage":
            if self.checkLeavePage():
                record.previousPage() 
        elif buttonname == "nextPage":
            if self.checkLeavePage():
                record.nextPage()  
        elif buttonname == "save":
            res = record.savePrices()
            if not res:
                message(res)
        self.setMatrixColor()        

    def beforeInsertRow(self, detailfieldname, rownr):
        result = ParentPriceLoadWindow.beforeInsertRow(self, detailfieldname, rownr)
        if detailfieldname == "Items":
            result = False
        return result
        
    def beforeDeleteRow(self, detailfieldname, rownr):
        result = ParentPriceLoadWindow.beforeDeleteRow(self, detailfieldname, rownr)
        if detailfieldname == "Items":
            result = False
        return result   

    def beforeClose(self):
        res = ParentPriceLoadWindow.beforeClose(self)
        if res:
            record = self.getRecord()
            if not self.checkLeavePage():
                res = False
            elif record.AutomaticSave:
                res = record.savePrices()
        return res

    def setMatrixColor(self):
        for row in self.getRecord().Items:
            self.setMatrixRowBGColor("ItemsMatrix",row.rowNr,self.MATRIX_COLOR[row.InList])
            
    def save(self):
        res = ParentPriceLoadWindow.save(self)
        if res:
            res = self.getRecord().savePrices()
            if res:
                self.setMatrixColor()
            else:
                message(res)
        return res
        
from OpenOrange import *

ParentBankExtractReaderWindow = SuperClass('BankExtractReaderWindow', "FinancialTransWindow", __file__)
class BankExtractReaderWindow(ParentBankExtractReaderWindow):

    def afterEdit(self,fieldname):
        record = self.getRecord()
        if fieldname == "FinAccount":
          record.pasteFinAccount()
          
    def afterEditRow(self,fieldname,rowfieldname,rownr):
        ParentBankExtractReaderWindow.afterEditRow(self,fieldname,rowfieldname,rownr)
        record = self.getRecord()
        if (fieldname == "ExtractRows"):
          row = record.ExtractRows[rownr]
          if (rowfieldname == "BankAccNr"):
            row.pasteBankAccNr(record)
          elif (rowfieldname == "BankTransType"):
            row.pasteBankTransType()
          elif (rowfieldname == "Comment"):
            row.pasteComment(record)

    def afterDeleteRow(self, fieldname, rownr):
        ParentBankExtractReaderWindow.afterDeleteRow(self, fieldname, rownr)
        if fieldname == "ExtractRows":
            self.getRecord().sumUp()

    def beforeDeleteRow(self, detailName, rownr):
        res = ParentBankExtractReaderWindow.beforeDeleteRow(self, detailName, rownr)
        if not res: return res
        return not self.getRecord().Status

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "ExtractRows"):
            row = record.ExtractRows[rownr]
            if(rowfieldname == "Entity"):
              if row.EntityType == 1: 
                  return "CustomerPasteWindow"
              elif row.EntityType == 0: 
                  return "SupplierPasteWindow"
              else:
                  return "PersonPasteWindow"
        return ParentBankExtractReaderWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)

    def buttonClicked(self, buttonname):
        record = self.getRecord()
        if (buttonname == "processextract"):
            fieldname = self.currentField()
            if (fieldname == "ExtractRows"):
                rownr = self.currentRow("ExtractRows")
                row = record.ExtractRows[rownr]
                from BankTransType import BankTransType
                btypes = BankTransType.getCodes()  
                #for row in record.ExtractRows:
                row.classify2(btypes)
                row.doLine(record)
                #nlt = row.book(record)
                #if nlt:
                #  nlt.afterLoad()
                #  nlt.openInWindow()
            else:
                if askYesNo(tr("Are you sure?")) == 0: return
                record.process()      
    
    def importBankfile (self):
        record = self.getRecord()
        filename = getOpenFileName()
        if not filename: return
        finAcc = self.getRecord()
        finAcc.importfile(filename)
        for crow,frow in enumerate(record.ExtractRows):
          if frow.Errormsg:
            self.setMatrixRowBGColor("ExtractRows",crow,"red")
        self.repaint()
            
    def analyse(self):   
        record = self.getRecord()
        from BankExtractAnalyse import BankExtractAnalyse
        report = BankExtractAnalyse()
        report.defaults()
        report.SerNr = record.SerNr
        report.open(False)

    def showAccNLT(self):
        record = self.getRecord()
        from BankExtractShowNLT import BankExtractShowNLT
        report = BankExtractShowNLT()
        report.defaults()
        report.SerNr = record.SerNr
        report.open(False)
        
    def showGenTables(self):
        record = self.getRecord()
        from BankExtractShowGenTables import BankExtractShowGenTables
        report = BankExtractShowGenTables()
        report.defaults()
        report.SerNr = record.SerNr
        report.open(False)
                
        
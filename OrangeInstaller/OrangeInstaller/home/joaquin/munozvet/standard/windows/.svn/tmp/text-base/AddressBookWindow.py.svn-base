#encoding: utf-8
from OpenOrange import *
import ListViewItem

class AddressBookItem(ListViewItem.ListViewItem):
                
    def selected(self):
        fields = self.getText()
        self.window.listContacts(self.Code)

    def keyPressed(self, text, state):
        if text == "DELETE":
            parent = self.getParent()
            if parent: parent.removeItem(self)
        elif text in ("ENTER", "RETURN"): self.selected()
        elif text == "h":
            self.getListView().setTreeMode()
            child = AddressBookItem(self)
            name, lastname = self.getText()
            child.setText((name + " Jr.", lastname))
            child.Code = ""


class AddressBookGroupItem(ListViewItem.ListViewItem):

    def selected(self):
        fields = self.getText()
        pa = self.getParent()
        if not hasattr(pa,"Code"): return
        #alert(pa.Code) 
        listview = self.window.getListView("PersonView")
        listview.clear()
        q = Query()
        q.sql = "SELECT Code, Name, LastName "
        q.sql+= "FROM Person "
        if (pa.Code == "Provinvce"):
           q.sql +=" WHERE?AND {ProvinceCode} = s|%s|" % (self.Code)
        elif (pa.Code == "JobPosition"):
           q.sql +=" WHERE?AND {JobPosition} = s|%s|" % (self.Code)
        elif (pa.Code == "Country"):
           q.sql +=" WHERE?AND {Country} = s|%s|" % (self.Code)
        elif (pa.Code == "Classification"):
           q.sql +=" WHERE?AND {Classification} = s|%s|" % (self.Code)
        elif (pa.Code == "Department"):
           q.sql +=" WHERE?AND {Department} = s|%s|" % (self.Code)
        elif (pa.Code == "Type"):
            q.sql +=" WHERE?AND {ContactType} = i|%s|" % (self.Code)
        #alert(q.sql)
        self.window.loadContacts(q)


ParentAddressBookWindow = SuperClass("AddressBookWindow","Window",__file__)
class AddressBookWindow(ParentAddressBookWindow):

    def buildDim(self,nameDic,DimName):
        listview = self.getListView("GroupView")
        dim = AddressBookGroupItem(listview)
        dim.setText( ((DimName),"") )
        dim.window = self
        dim.Code = DimName
        for key in nameDic.keys():
                gitem = AddressBookGroupItem(dim)
                gitem.setText( ((nameDic[key]),"") )
                gitem.window = self
                gitem.Code = key


    def loadGroups(self):
        listview = self.getListView("GroupView")
        listview.clear()
        from JobPosition import JobPosition
        from Province import Province
        from Country import Country
        from Classification import Classification
        from Department import Department
        self.buildDim(Province.getNames(),"Province")
        names = JobPosition.getNames()
        if names:
            self.buildDim(names,"JobPosition")
        self.buildDim(Country.getNames(),"Country")
        self.buildDim(Classification.getNames(),"Classification")
        #self.buildDim(Department.getNames(),"Department")
        self.buildDim({0:"Customer",1:"Supplier",2:"Guest",3:"Staff"},"Type")

 
    def loadContacts(self,q):
        self.curPerson = None
        view = self.getReportView("ContactInfoView")
        #view.clear()                       Pablo porque no funciona ?
        listview = self.getListView("PersonView")
        if q.open():
            for rec in q:
                item = AddressBookItem(listview)
                item.setText((rec.Name, rec.LastName))
                item.window = self
                item.Code = rec.Code

    def afterShowRecord(self):
        ParentAddressBookWindow.afterShowRecord(self)
        self.curPerson = None
        listview = self.getListView("PersonView")
        listview.setColumns(( tr("Name") , tr("LastName") ))
        listview = self.getListView("GroupView")
        listview.setTreeMode()
        listview.setColumns(( "Dim",tr("Group") ))
        self.loadGroups()
        from OurSettings import OurSettings
        os = OurSettings.bring()
        q = Query()
        q.sql = "SELECT {Code}, {Name}, {LastName} FROM [Person] "
        q.sql +=" WHERE?AND {ProvinceCode} = s|%s|" % (os.ProvinceCode)
        self.loadContacts(q)

    def afterEdit(self, fieldname):
        ParentAddressBookWindow.afterEdit(self, fieldname)
        rec = self.getRecord()
        if fieldname == "PersonCode":
            if (rec.PersonCode):
                listview = self.getListView("PersonView")
                listview.clear()
                q = Query()
                q.sql = "SELECT {Code}, {Name}, {LastName} FROM [Person] "
                if(rec.PersonCode): 
                    q.sql +=" WHERE (({Name} LIKE s|%s|  ) " % ("%"+rec.PersonCode+"%")
                    q.sql +=" OR  ({LastName} LIKE s|%s| )) " % ("%"+rec.PersonCode+"%")
                self.loadContacts(q)
                return
                item = AddressBookItem(listview)
                listview = self.getListView("PersonView")
                item.setText((p.Name, p.LastName))
                item.window = self
                item.Code = p.Code
                listview.setCurrentItem(item)
                listview.ensureItemVisible(item)


    def listContacts(self,code):
        self.curPerson = code
        from ContactInfo import ContactInfo
        record = self.getRecord()
        report = ContactInfo()
        report.defaults()
        report.setView(self.getReportView("ContactInfoView"))
        report.Code = code
        report.open(False)
        #processEvents() #needed to avoid report tool bar to showup #hace colgar open
        self.setFocus()

    def buttonClicked(self, buttonname):
        if buttonname == "NewContact":
            from Person import Person
            from PersonWindow import PersonWindow
            p = Person()
            p.ContactType = 0
            wnd = PersonWindow()
            wnd.setRecord(p)
            wnd.open()
        elif buttonname == "addClassification":
            val = getString(tr("Classification"),"")
            if (not val): return
            from Classification import Classification
            #from ClassificationWindow import ClassificationWindow
            p = Classification()
            p.Code = val[:5]
            p.Name = val
            #wnd = ClassificationWindow()
            #wnd.setRecord(p)
            #wnd.open()
            Classification.buffer.clear()
            self.loadGroups()

#encoding: utf-8
# -*- coding: utf-8 -*-
from OpenOrange import *
from CouponCons import *
from Report import Report

ParentCouponConsWindow = SuperClass("CouponConsWindow","FinancialTransWindow",__file__)
class CouponConsWindow(ParentCouponConsWindow):

    def afterEdit(self, fieldname):
        ParentCouponConsWindow.afterEdit(self, fieldname)
        if (fieldname == "CredCardType"):
            self.getRecord().pasteCredCardType()

    def afterDeleteRow(self, fieldname, rownr):
        self.getRecord().sumUp()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        record = self.getRecord()
        if (fieldname == "CouponRows"):
            row = record.CouponRows[rownr]
            if (rowfieldname == "Coupon"):
                row.pasteCoupon()
                record.sumUp()
            elif (rowfieldname == "Amount"):
                record.sumUp()
        if (fieldname == "CostRows"):
            row = record.CostRows[rownr]
            if (rowfieldname == "Account"):
                row.pasteAccount()
            elif (rowfieldname == "Amount"):
                record.sumUp()
            elif (rowfieldname == "VATCode"):
                record.sumUp()

    def filterPasteWindowRow(self,fieldname,rowfieldname,rownr):
        cc = self.getRecord()
        if (fieldname == "CouponRows"):
            if (rowfieldname == "Coupon"):
              if (cc.OperationType==0):
                return "{Status} IN (i|1|, i|6|)"                # en cartera o autorizado
              elif (cc.OperationType==1):
                return "{Status}=i|2|"                # accreditado
        elif (fieldname == "FinIdent"):
            return "{CashOutf}=i|1|"                  # financiera

    def loadReport (self):
        from CoupToConsList import CoupToConsList
        report = None
        if hasattr(self, "report"):
            report = self.report
        if report:
            report.close()
        r = self.getReportView("CoupsToCons")
        record = self.getRecord()
        report = CoupToConsList()
        report.defaults()
        report.setView(r)
        report.Cons = record
        report.open(False)
        self.setConsReport(report)

    def buttonClicked(self, buttonname):
        ParentCouponConsWindow.buttonClicked(self, buttonname)
        cc = self.getRecord()
        if buttonname == "ShowCoupons": #Boton Buscar
            if cc.Status:
                message(tr("This Register is Closed"))
            else:
                self.loadReport()
        elif buttonname == "CleanCoupons":
            if cc.Status:
                message(tr("This Register is Closed"))
            else:
                cc.CouponRows.clear()
                cc.NotConciliatedRows.clear()
                cc.sumUp()
                # lo recarga.
            self.loadReport()

    def genCashIn(self):
        cc = self.getRecord()
        if (cc.isNew() or cc.isModified()):
            message(tr("RECORDNOTSAVED"))
            return
        if (not cc.lifeContinues()):
            message("Credit Card Type Circuit Ends in Coupon Clearance")
            return
        cashin = cc.genCashIn()
        if (cashin):
            from CashInWindow import CashInWindow
            cashinw = CashInWindow()
            cashinw.setRecord(cashin)
            cashinw.open()

    def genPurchaseInvoice(self):
        coupc = self.getRecord()
        if (not coupc.lifeContinues()):
            message("Credit Card Type Circuit Ends in Coupon Clearance")
            return
        from PurchaseInvoice import PurchaseInvoice
        from PurchaseInvoiceWindow import PurchaseInvoiceWindow
        pinv = coupc.genPurchaseInvoice(coupc)
        if pinv:
            win = PurchaseInvoiceWindow()
            win.setRecord(pinv)
            win.open()

    def parseFromBankDate (self, strDate):
        #strDate = "01 Aug 2008" -> python date
        months = \
            {"Jan":1,"Feb":2,"Mar":3,"Apr":4,"May":5,"Jun":6,
            "Jul":7,"Aug":8,"Sep":9,"Oct":10,"Nov":11,"Dec":12}
        try:
            d = int(strDate[0:2])
            m = int(months[strDate[3:6]])
            y = int(strDate[7:11])
            return date (y,m,d)
        except:
            return None
    def setConsReport (self, report):
        self.report=report

    def getConsReport (self):
        if not hasattr(self, "report"):
            return None
        return self.report

    def appendConciliatedCoupon(self, serNr):
        report = self.getConsReport()
        if report:
            report.pasteCoupon (serNr, None)
        else:
            coupc = self.getRecord()
            for sel in coupc.CouponRows:
                if sel.Coupon==serNr:
                    break
            else:
                ccrow = NewRecord("CoupConCpnRow")
                ccrow.Coupon = serNr
                ccrow.pasteCoupon()
                coupc.CouponRows.append (ccrow)

    def importCreditCardFile(self):
        coupc = self.getRecord()
        filename = getOpenFileName(tr("Select File"))
        skiped = [] # todos los que cupones no coincidan
        if not filename:
            return False
        f = open(filename,"r")
        if not f:
            message(tr("File could not be opened:"))
            return False
        for line in f.readlines():
            fields = line.replace("\n","").replace("\r","").split(",")
            fields = map (lambda cad: cad.strip(), fields)
            last4CreditCard=fields[6][-4:]
            tdate = self.parseFromBankDate (fields[4])
            # opcionales, si falla la busqueda.
            batchNr = fields[1].strip()
            couponNr = fields[5].strip()
            # usan numeros con formato 999.999.00, entonces le elimino los
            # primeros.
            amount = fields[10].replace(".","")
            amount = "%s.%s" % (amount[:-2],amount[-2:])
            if tdate is not None:
                sernr = coupc.findCoupon (last4CreditCard, tdate, amount)
                if sernr is None:
                    skiped.append ((str(last4CreditCard), float(amount), tdate, int(couponNr), int(batchNr)))
                else:
                    self.appendConciliatedCoupon (sernr)
            f.close()
        r = self.getRecord()
        r.NotConciliatedRows.clear()
        for cData in skiped:
            row = CouponConcNotConciliatedRow()
            row.CreditCardNr, row.Amount, row.TransDate, row.CouponNr, row.BatchNr = cData
            r.NotConciliatedRows.append (row)


    def showCouponConsStatus(self):
        record = self.getRecord()
        from CouponConsStatus import CouponConsStatus
        ccstat = CouponConsStatus()
        ccstat.defaults()
        ccsrec = ccstat.getRecord()
        ccsrec.SerNr = record.SerNr
        ccstat.open(False)
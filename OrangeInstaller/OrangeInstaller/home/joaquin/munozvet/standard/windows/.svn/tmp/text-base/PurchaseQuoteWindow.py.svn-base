#encoding: utf-8
from OpenOrange import *

ParentPurchaseQuoteWindow = SuperClass("PurchaseQuoteWindow","PurchaseTransactionWindow",__file__)
class PurchaseQuoteWindow(ParentPurchaseQuoteWindow):

    def authorize(self):
        record = self.getRecord()
        return record.authorize()

    def afterEdit(self, fieldname):
        ParentPurchaseQuoteWindow.afterEdit(self, fieldname)
        if (fieldname == "PayTerm"):
            self.getRecord().pastePayTerm()
        elif (fieldname == "User"):
            self.getRecord().pasteUser()
        elif (fieldname == "StockDepo"):
            self.getRecord().pasteStockDepo()
        elif (fieldname == "SupCode"):
            self.getRecord().pasteSupCode()
        elif (fieldname == "Contact"):
            self.getRecord().pasteContact()
        elif (fieldname == "ProvinceCode"):
            self.getRecord().pasteProvinceCode()
        elif (fieldname == "ZipCode"):
            self.getRecord().pasteZipCode()
        elif (fieldname == "LocalityCode"):
            self.getRecord().pasteLocalityCode()
        elif (fieldname == "CustCode"):
            self.getRecord().pasteCustCode()

    def beforeEditRow(self, fieldname, rowfieldname, rownr):
        res = ParentPurchaseQuoteWindow.beforeEditRow(self, fieldname, rowfieldname, rownr)
        if (not res): return res
        res = self.getRecord().fieldIsEditable(fieldname, rowfieldname, rownr)
        return res

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentPurchaseQuoteWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        Purchaseq = self.getRecord()
        if (fieldname == "Items"):
            item = Purchaseq.Items[rownr]
            if (rowfieldname == "ArtCode"):
                item.pasteArtCode(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            if (rowfieldname == "SupArtCode"):
                item.pasteSupArtCode(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname == "Price"):
                item.pastePrice(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname == "VATPrice"):
                item.pasteVATPrice(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname == "VATCode"):
                item.pasteVATCode(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname =="Discount"): 
                item.pasteDiscount(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname =="Qty"):
                item.pasteQty(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname =="Unit"):
                item.pasteUnit(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname =="SupQty"):
                item.pasteSupQty(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()
            elif (rowfieldname in ["Discount1","Discount2","Discount3","Discount4","Discount5"]):
                item.pasteAccDiscounts(Purchaseq)
                item.sumUp(Purchaseq)
                Purchaseq.sumUp()

    def genPurchaseOrder(self):
        record = self.getRecord()
        if record.isModified() or record.isNew():
            message("You need to save the current record first!")
            return
        if (record.Closed):
            message("This Record is closed")
            return False
        if not record.Status:
            message("ONLYALLOWED4APPROVEDTRANS")
            return
        po = self.getRecord().genPurchaseOrder()
        if po:
          po.openInWindow()
          self.closeAfterGen()
        else:
          message(po)
        return po 

    def afterDeleteRow(self, fieldname, rownr):
        purchaseorder = self.getRecord()
        if (fieldname == "Items"):
          purchaseorder.sumUp()

    def showPurchaseQuoteStatusReport(self):
        from PurchaseQuoteStatusReport import PurchaseQuoteStatusReport
        report = PurchaseQuoteStatusReport()
        report.getRecord().PurchaseQuoteNr = self.getRecord().SerNr
        report.open(False)

    def filterPasteWindow(self,fieldname):
        if fieldname == "Contact":
            if self.getRecord().SupCode:
                return "({CustCode} = s|%s| AND {ContactType}=i|1|)" % self.getRecord().SupCode
        elif fieldname == "LocalityCode":
            if self.getRecord().ZipCode:
                return "{ZipCode} = s|%s|" % self.getRecord().ZipCode
        elif fieldname == "PayTerm":
            from PayTerm import PayTerm
            return "({OperationType} IS NULL OR {OperationType} IN (i|%i|, i|%i|))" % (PayTerm.ALL_OPERATIONS,PayTerm.PURCHASE)        
        return ParentPurchaseQuoteWindow.filterPasteWindow(self,fieldname)

#encoding: utf-8
from OpenOrange import *
from Report import Report
from Quote import QuoteItemRow

ParentQuoteWindow = SuperClass("QuoteWindow","SalesTransactionWindow",__file__)
class QuoteWindow(ParentQuoteWindow):

    def activateNextCell(self, matrixname, row, col):
        columns = self.getMatrixColumns(matrixname)
        if columns[col] == "ArtCode": # To Qty
            row,col = getNextCol(columns,row,col,"Qty")
        elif columns[col] == "Qty": # To Next Row
            col = 0
            row += 1
        else:
            row,col = getNextCol(columns,row,col,"")
        return (row,col)

    def afterShowRecord(self):
        ParentQuoteWindow.afterShowRecord(self)
        from SalesSettings import SalesSettings
        ss = SalesSettings.bring()
        if ss.ItemPages == 2:
            self.setTabPageVisibility("Items", "ItemsVATExclPage", True)
            self.setTabPageVisibility("Items", "ItemsVATInclPage", False)
        elif ss.ItemPages == 3:
            self.setTabPageVisibility("Items", "ItemsVATExclPage", False)
            self.setTabPageVisibility("Items", "ItemsVATInclPage", True)
        if (not currentUserCanDo("CanViewQuoteDiscountsTab")):
            self.setTabPageVisibility("Items", "DiscountsPage", False)

    def checkItemPages(self):
        ParentQuoteWindow.afterShowRecord(self)
        from SalesSettings import SalesSettings
        ss = SalesSettings.bring()
        if ss.ItemPages == 1:
            from PriceDeal import PriceDeal
            pd = PriceDeal.bring(self.getRecord().PriceDeal)
            if pd:
                if pd.InclVAT:
                    self.setTabPageVisibility("Items", "ItemsVATInclPage", True)
                    self.setTabPageVisibility("Items", "ItemsVATExclPage", False)
                else:
                    self.setTabPageVisibility("Items", "ItemsVATExclPage", True)
                    self.setTabPageVisibility("Items", "ItemsVATInclPage", False)

    def afterEdit(self, fieldname):
        ParentQuoteWindow.afterEdit(self, fieldname)
        record = self.getRecord()
        if (fieldname == "CustCode"):
            self.checkItemPages()
        elif (fieldname == "Status"):
            record.setProbability()
        elif (fieldname == "PayTerm"):
            record.pastePayTerm()
        elif (fieldname == "Contact"):
            record.pasteContact()
        elif (fieldname == "SalesMan"):
            record.pasteSalesMan()
        elif (fieldname == "ArtCodeName"):
            from Quote import QuoteItemRow
            self.showItemSearchReport(QuoteItemRow)
        elif (fieldname == "ClausesCode"):
            record.pasteClauseCode()
        elif (fieldname == "PriceDeal"):
            record.pastePriceDeal()
            self.checkItemPages()

    def copyRecord(self):
        r = self.getRecord()
        ot = r.OriginType
        on = r.OriginNr                
        ParentQuoteWindow.copyRecord(self)
        if ot == self.getRecord().Origin["Opportunity"]:
            if askYesNo(tr("Would you like to keep the origin record?")):
                self.getRecord().OriginType = ot
                self.getRecord().OriginNr = on

    def beforeEditRow(self, fieldname, rowfieldname, rownr):
        res = ParentQuoteWindow.beforeEditRow(self, fieldname, rowfieldname, rownr)
        if not res: return res
        if fieldname == "Items":
            row = self.getRecord().Items[rownr]
            if rowfieldname == "Qty":
                row.OldQty = row.Qty
        return res

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentQuoteWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        quote= self.getRecord()
        if (fieldname == "Items"):
            quoteItem = quote.Items[rownr]
            if (rowfieldname == "ArtCode"):
                from Item import Item
                i=Item()
                i.Code=quoteItem.ArtCode
                i.load()
                if i:
                    if i.Recipe:
                        pos=0
                        for it in  quote.Items:
                            if it.ArtCode==quoteItem.ArtCode and pos!=rownr:
                                message("No puede repetir articulos compuesto. Incremente la cantidad de ser necesario")            
                                quote.Items.remove(rownr)
                            pos+=1
                inputItem = quoteItem.ArtCode
                quoteItem.showArtCodeWarning(quote)
                quoteItem.pasteArtCode(quote)
                if inputItem != quoteItem.ArtCode: #Codigo de Barras o ALternativo
                    quoteItem.Qty = 1
                    quote.setFocusOnField("Items","Qty",rownr)
                quoteItem.sumUp(quote)
                quoteItem.findDiscount(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "Formula"):
                from Item import Item
                it = Item.bring(quoteItem.ArtCode)
                if it:
                    if it.ItemType == Item.COMMENT:
                        for row in quote.Items[rownr:]:
                            row.pasteFormula(quote)
                            row.pasteQty(quote)
                            row.sumUp(quote)
                            row.findDiscount(quote)
                            row.sumUp(quote)
                            it = Item.bring(quoteItem.ArtCode)
                            if it and it.ItemType == Item.COMMENT and row.rowNr<>rownr:
                                break;
                    else:
                        quoteItem.pasteFormula(quote)  # basically sets Qty
                        quoteItem.pasteQty(quote)
                        quoteItem.sumUp(quote)
                        quoteItem.findDiscount(quote)
                        quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "Qty"):
                quoteItem.pasteQty(quote)
                quoteItem.sumUp(quote)
                quoteItem.findDiscount(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "Price"):
                quoteItem.pastePrice(quote)
                quoteItem.sumUp(quote)
                quoteItem.findDiscount(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "VATPrice"):
                quoteItem.pasteVATPrice(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "GProfit"):
                quoteItem.pasteGProfit(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "Markup"):
                quoteItem.pasteMarkup(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "VATCode"):
                quoteItem.pasteVATCode(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "Unit"):
                quoteItem.pasteUnit(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "RowNet"):
                res = (quoteItem.Price * quoteItem.Qty)
                if res:
                  quoteItem.Discount = 100.00 - ((quoteItem.RowNet)* 100.0 / res )
                else:
                  quoteItem.Price = quoteItem.RowNet / quoteItem.Qty
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname == "RowTotal"):
                res = (quoteItem.VATPrice * quoteItem.Qty)
                if res:
                  quoteItem.Discount = 100.00 - ((quoteItem.RowTotal)* 100.0 / res )
                else:
                  quoteItem.VATPrice = quoteItem.RowTotal / quoteItem.Qty
                quoteItem.sumUp(quote)
                quote.sumUp()
            elif (rowfieldname =="Discount"):
                quoteItem.pasteDiscount(quote)
                quoteItem.sumUp(quote)
                quote.sumUp()
        elif (fieldname == "ClauseRows"):
            quoteclau = quote.ClauseRows[rownr]
            if (rowfieldname == "ClauseCode"):
                quoteclau.pasteClauseCode()
        quote.showMessages()


    def afterDeleteRow(self, detailfieldname, rownr):
        self.getRecord().sumUp()

    def filterPasteWindow(self, fieldname):
        if fieldname == "Contact":
            if self.getRecord().CustCode:
                return "{CustCode} = s|%s|" % self.getRecord().CustCode
        elif fieldname == "SOGroup":
            return "{UseInQuote} = 1"
        elif fieldname == "PayTerm":
            from PayTerm import PayTerm
            return "({OperationType} IS NULL OR {OperationType} IN (i|%i|, i|%i|))" % (PayTerm.ALL_OPERATIONS,PayTerm.SALES)    
        return ParentQuoteWindow.filterPasteWindow(self,fieldname)

    def filterPasteWindowRow(self, detailfieldname, rowfieldname, rownr):
        record = self.getRecord()
        if detailfieldname == "Items":
            row = record.Items[rownr]
            if rowfieldname == "ArtCode":
                q = "(({Closed} IS NULL OR {Closed} = i|0|) AND (UseType = i|0| OR UseType = i|1| OR UseType IS NULL ))"
                from QuoteSettings import QuoteSettings
                qs = QuoteSettings.bring()
                if qs:
                    if qs.OptionFldFunction and row.Option:
                        q += " AND (Classification = s|%s|)"%row.Option
                return q
        return ParentQuoteWindow.filterPasteWindowRow(self,detailfieldname, rowfieldname, rownr)

    def buttonClicked(self, buttonname):
        ParentQuoteWindow.buttonClicked(self, buttonname)
        record = self.getRecord()
        if buttonname == "ContactList":
            r = self.getReportView("Contacts")
            from ContactList import ContactList
            report = ContactList()
            report.defaults()
            report.setView(r)
            report.getRecord().CustCode = record.CustCode
            report.tinyList = True
            report.open(False)
        elif buttonname == "NewContact":
            from Person import Person
            from PersonWindow import PersonWindow
            p = Person()
            p.CustCode = self.getRecord().CustCode
            p.ContactType = 0
            p.pasteCustCode()
            wnd = PersonWindow()
            wnd.setRecord(p)
            wnd.open()
        elif buttonname == "ShowItemSearchReport":
            from Quote import QuoteItemRow
            self.showItemSearchReport(QuoteItemRow)
        elif buttonname == "clausePick":
            from Report import Report
            from ClausePick import ClausePick
            report = ClausePick()
            report.record = self.getRecord()
            #report.getView().resize(400,700)
            report.open(False)
        elif buttonname == "clausesPackPaste":
            from ClausesPack import ClausesPack
            cp = ClausesPack.bring(record.ClausesPack)
            if cp:
                for c in cp.getClausesNameList():
                    record.addClause(c)
                    record.ClausesPack = ''
        elif buttonname == "lastsales":
            from Report import Report
            from LastItemSaleCustomer import LastItemSaleCustomer
            report = LastItemSaleCustomer()
            report.defaults()
            specs = report.getRecord()
            specs.CustCode = record.CustCode
            report.setView(self.getReportView("ItemSearchView"))
            report.record = self.getRecord()
            report.window = self
            report.open(False)
        elif buttonname == "recalculateFormule":
            quote = self.getRecord()
            for it in quote.Items:
                it.pasteFormula(quote)  # basically sets Qty
                it.pasteQty(quote)
                it.sumUp(quote)
                it.findDiscount(quote)
                it.sumUp(quote)
            quote.sumUp()

    def quoteStatus(self):
        qte = self.getRecord()
        from Report import Report
        from QuoteStatus import QuoteStatus
        report = QuoteStatus()
        report.getRecord().SerNr = qte.SerNr
        report.record = self.getRecord()
        report.open(False)

    #           Fue a Sales Transaction
    #def showItemSearchReport(self):
    #    from Report import Report
    #    from ItemSearchReport import ItemSearchReport
    #    report = ItemSearchReport()
    #    report.getRecord().Name = self.getRecord().ArtCodeName
    #    report.getRecord().UseType = 0
    #    report.setView(self.getReportView("ItemSearchView"))
    #    report.record = self.getRecord()
    #    report.window = self
    #    report.itemclass = QuoteItemRow
    #    report.open(False)

    def genUpdatedQuote(self):
        self.getRecord().Status = 4 #Vencida
        res = self.getRecord().save()
        if (not res):
            message(res)
            return res
        newquote = self.getRecord().clone()
        newquote.SerNr = None
        newquote.ToSerNr = None
        newquote.defaults()
        newquote.OriginType = self.getRecord().OriginType
        newquote.OriginNr = self.getRecord().OriginNr
        for item in newquote.Items:
            item.pasteArtCode(newquote)
            item.pasteQty(newquote)
            item.pastePrice(newquote)
            item.sumUp(newquote)
        newquote.sumUp()
        newquote.openInWindow()
        self.closeAfterGen()
        commit()

    @checkTransactionForAction
    def genSalesOrder(self):
        from QuoteSettings import QuoteSettings
        qs = QuoteSettings.bring()
        quote = self.getRecord()
        if (not quote.isAuthorized()):
            message("TRANSNOTAUTHORIZED")
            return False
        options = {}
        for row in quote.Items:
            if row.Option:
                options[row.Option] = None
        options = options.keys()
        options.sort()
        option = ""
        if len(options) and not qs.OptionFldFunction:
            option = getSelection("Select", tuple(options))
            if not option: return
        so = quote.genSalesOrder(option)
        if so:
          so.openInWindow()
          self.closeAfterGen()
        else:
          message(so)
        return so

    @checkTransactionForAction
    def genInvoice(self):
        record = self.getRecord()
        if not record.Status == record.ACCEPTED:
            return message(ErrorResponse(tr("INVALIDSTATE")))
        inv = record.genInvoice()
        if inv:
          inv.openInWindow()
          self.closeAfterGen()
        else:
          message(inv)
        return inv
        
    def addItemsFromPricesList(self): 
        record = self.getRecord()
        if not record.PriceDeal:
            message(ErrorResponse(tr("NONBLANKERR", "Price Deal")))
        else:
            record.addItemsFromPricesList()

    def genPriceListAndPrice(self):
        record = self.getRecord()
        if not record.isModified():
            if record.Status != record.ACCEPTED:
                message(ErrorResponse(tr("ONLYALLOWED4APPROVEDTRANS")))
            else:
                record.genPriceListAndPrice()
        else:
            message(ErrorResponse(tr("REGISTERNOTSAVED")))
            
    def sendPriceListQuote(self):
        record = self.getRecord()
        if record.Status == record.ACCEPTED:
            res = askYesNo("La cotizacion ya está aceptada, ¿Desea enviar de todas formas?")
            if (res != 1):
                return
        record.sendMailPriceListQuote()

    def fixCustomerPrices(self):
        record = self.getRecord()
        record.fixCustomerPrices()

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "Items"):
            row = record.Items[rownr]
            if(rowfieldname == "Option"):
                from QuoteSettings import QuoteSettings
                qs = QuoteSettings.bring()
                if qs:
                    if qs.OptionFldFunction:
                        return "ClassificationPasteWindow"
                    else:
                        return ""
        return ParentQuoteWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)
    
    def quoteReportBySection(self):
        qte = self.getRecord()
        from Report import Report
        from QuoteReportBySection import QuoteReportBySection
        report = QuoteReportBySection()
        report.defaults()
        report.getRecord().SerNr = qte.SerNr
        report.record = self.getRecord()
        report.open(False)
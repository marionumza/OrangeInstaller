#encoding: utf-8
from OpenOrange import *
from BankPayment import BankPayment,BankPaymentRow

ParentBankPaymentWindow = SuperClass("BankPaymentWindow","FinancialTransWindow",__file__)
class BankPaymentWindow(ParentBankPaymentWindow):

    def afterEdit(self, fieldname):
        ParentBankPaymentWindow.afterEdit(self, fieldname)
        paym = self.getRecord()
        if (fieldname == "PayMode"):
            paym.pastePayMode()
            
    def genBankPaymentInstruction(self):
        pay = self.getRecord()
        if (pay.isNew() or pay.isModified()):
            message (tr("REGISTERNOTSAVED"))
        elif pay.ExportFlag == 1:
            message (tr("REGISTEREXPORTED"))
        else:
            message (pay.generateBankFile())

    def pasteOpen(self):
        pay = self.getRecord()
        if not Payment.Status:
          pay.Invoices.clear()
          pay.pasteInvoices(1)
          pay.sumUp()
          pay.payInvoices()
          pay.sumUp()

    def pasteNext(self):
        pay = self.getRecord()
        if not Payment.Status:
          pay.Invoices.clear()
          pay.pasteInvoices(2)
          pay.sumUp()
          pay.payInvoices()
          pay.sumUp()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        Payment = self.getRecord()
        if (fieldname == "Invoices"):
            row = Payment.Invoices[rownr]
            if (rowfieldname == "InvoiceNr"):
                row.pasteInvoiceNr(Payment)
                row.sumUp(Payment)
                Payment.sumUp()
            elif (rowfieldname == "Amount"):
                row.pasteAmount(Payment)
                row.sumUp(Payment)
                Payment.sumUp()
            elif (rowfieldname == "InvoiceAmount"):
                row.pasteInvoiceAmount(Payment)
                row.sumUp(Payment)
                Payment.sumUp()
            elif (rowfieldname == "OnAccNr"):
                row.pasteOnAccNr(Payment)
                row.sumUp(Payment)
                Payment.sumUp()
            elif (rowfieldname == "SupCode"):
                row.pasteSupCode(Payment)

    def afterDeleteRow(self, fieldname, rownr):
        Payment = self.getRecord()
        if (fieldname == "Invoices"):
            Payment.sumUp()

    def filterPasteWindowRow(self,fieldname,rowfieldname,rownr):
        Payment = self.getRecord()
        if (fieldname == "Invoices"):
            if (rowfieldname == "InvoiceNr"):
                invList= []
                for invrow in Payment.Invoices:
                    if invrow.InvoiceNr: 
                        invList.append(str(invrow.InvoiceNr))
                invrow = Payment.Invoices[rownr]
                filt = "{OpenFlag} = i|1| "
                if (invrow.SupCode):
                    filt += "AND {SupCode} = s|%s| " %(invrow.SupCode)
                filt += "AND {Status} = i|1| "
                filt += "AND ({Invalid}=i|0| OR {Invalid} IS NULL)" 
                if len(invList) > 0:
                    filt += "AND {SerNr} NOT IN (%s)" % ",".join(invList)
                filt += " AND ({AppliesToInvoiceNr} IS NULL OR {AppliesToInvoiceNr} = i|0|) " #que no estï¿½n aplicadas a facturas
                filt += " AND ({Saldo} <> 0.0) " #que no tengan saldo las facturas
                return filt
            elif rowfieldname == "OnAccNr":
                invrow = Payment.Invoices[rownr]
                return "(({OpenFlag} = i|1|) AND ({Entity} = s|%s|) AND ({Type} = i|1|))" % invrow.SupCode
            elif rowfieldname == "BankAccount":
                invrow = Payment.Invoices[rownr]
                return "({Entity} = s|%s| AND {Type} = i|0|)" % invrow.SupCode


    def buttonClicked(self, buttonname):
        ParentBankPaymentWindow.buttonClicked(self, buttonname)
        bp = self.getRecord()
        if (buttonname=="pasteOpenInvoices"):
            bp.pasteInvoices()

    #Modificaciones para llamar varias ventanas de Mail EC
    #--------------------------------------------------------------
    @checkTransactionForAction
    def sendMail(self):
        record = self.getRecord()
        from Mail import Mail
        from MailWindow import MailWindow
        from Supplier import Supplier
        records = set()
        for row in record.Invoices:
            sp = Supplier.bring(row.SupCode)
            if sp:
                records.add(sp.Code)
        for c in records:
            record.SupCode = c
            mail = Mail()
            mail.defaults()
            try:
                mail.OriginId = record.getPortableId()
                mail.OriginRecordName = record.name()
            except:
                pass
            res = mail.save() # i save the record here, because importHTML method needs internalId value defined.
            mail.importHTML(record.getHTML())
            commit()
            if hasattr(record,"SupCode"):
                mail.EntityType = 1
                mail.CustCode = record.SupCode
                cust = Supplier.bring(record.SupCode)
                mail.pasteCustCode()
            if record.hasField("SerNr"):
                mail.Subject = "%s %i" % (record.getTitle(),record.SerNr)
            elif record.hasField("Code"):
                mail.Subject = "%s %s" % (record.getTitle(),utf8(record.Code))
            mailWindow = MailWindow()
            mailWindow.setRecord(mail)
            mailWindow.open()
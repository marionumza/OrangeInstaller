#encoding: utf-8
from OpenOrange import *
import ListViewItem

class CalendarCustomerSearchResultItem(ListViewItem.ListViewItem):

    def clicked(self):
        self.window.getRecord().CustCode = self.key

    def selected(self):
        self.window.getRecord().CustCode = self.key

    def keyPressed(self, text, state):
        if (text in ("RETURN", "DOWN", "UP")):
            self.window.selectedCustomer(self.key, self.getText())


class CalendarUserSearchResultItem(ListViewItem.ListViewItem):

    def clicked(self):
        self.window.selected(self.key, self.getText())

    def selected(self):
        self.window.selected(self.key, self.getText())

    def keyPressed(self, text, state):
        return

ParentCalendarControlsWindow = SuperClass("CalendarControlsWindow","Window",__file__)
class CalendarControlsWindow(ParentCalendarControlsWindow):

    def __init__(self):
        if "WEBCLIENT" in globals():
            from RPCHandler import OOUnsupportedFeaturedException
            raise OOUnsupportedFeaturedException(tr("Please use built-in webclient calendar."))
        self.Date = today()
        self.selectedcalls = []

    def getSearchText(self):
        return self.getEditorValue("UserSearch")

    def keyPressed(self, key, state, editorname, columnname, rownr):
        if editorname == "UserSearch":
            self.refreshResults(editorname,"User")
        elif editorname == "CustomerSearch":
            self.refreshResults(editorname,"Customer")

    def refreshResults(self, editorname, tablename):
        results = self.getResults(self.getEditorValue(editorname), tablename)
        listNameView = "Search%sResult"%tablename
        listview = self.getListView(listNameView)
        listview.clear()
        for key, value in results.items():
            exec("item = Calendar%sSearchResultItem(listview)"%tablename)
            item.window = self
            item.key = key
            item.setText(value)
            

    def getColumnLabels(self):
        return ("Code", "Name")

    def getResults(self, text,tablename):
        res = {}
        q = Query()
        q.sql = "SELECT Code, Name FROM [%s] " % (tablename)
        if text: q.sql += "WHERE?AND (Code LIKE s|%%%s%%| OR Name LIKE s|%%%s%%|)\n" % (text, text)
        q.sql += "WHERE?AND (Closed = 0 or Closed IS NULL)\n"
        if q.open():
            for rec in q:
                res[rec.Code] = (rec.Code, rec.Name)
        return res

    def selected(self, key, value):
        from CRMSettings import CRMSettings
        crmsettings = CRMSettings.bring()
        if crmsettings.CalendarUserSearchMode == 0:
            users = self.getRecord().Users
            userslist = filter(lambda y: y != "", map(lambda x: x.strip(), users.split(",")))

            if key not in userslist:
                userslist.append(key)
            else:
                userslist.remove(key)
            self.getRecord().Users = ','.join(userslist)
        else:
            self.getRecord().Users = key
        self.refreshDayWeek()

    def selectedCustomer(self, key, value):
        self.getRecord().CustCode = key

    def prevRecord(self):
        record = self.getRecord()
        date = StartOfMonth(record.Date)
        record.Date = addMonths(date,-1)
        savActual = self.getScrollAreaView("ScrollCalendarActual")
        self.drawMonthView(savActual,record.Date)
        savPrev = self.getScrollAreaView("ScrollCalendarPrev")
        self.drawMonthView(savPrev,addMonths(record.Date,-1))
        savNext = self.getScrollAreaView("ScrollCalendarNext")
        self.drawMonthView(savNext,addMonths(record.Date,1))
        if (record.ShowWeek == True):
            self.drawWeekView()
        else:
            self.drawDayView()
        #processEvents() #needed to avoid report tool bar to showup #hace colgar open
        self.setFocus()

    def nextRecord(self):
        record = self.getRecord()
        date = StartOfMonth(record.Date)
        record.Date = addMonths(date,1)
        savActual = self.getScrollAreaView("ScrollCalendarActual")
        self.drawMonthView(savActual,record.Date)
        savPrev = self.getScrollAreaView("ScrollCalendarPrev")
        self.drawMonthView(savPrev,addMonths(record.Date,-1))
        savNext = self.getScrollAreaView("ScrollCalendarNext")
        self.drawMonthView(savNext,addMonths(record.Date,1))
        if (record.ShowWeek == True):
            self.drawWeekView()
        else:
            self.drawDayView()
        #processEvents() #needed to avoid report tool bar to showup  # hace colgar open
        self.setFocus()

    def afterEdit(self, fieldname):
        if fieldname == "Date":
            self.refreshAll()
        elif fieldname == "Users":
            self.refreshDayWeek()
        elif fieldname == "StartTime":
            self.refreshDayWeek()
        elif fieldname == "EndTime":
            self.refreshDayWeek()
        elif fieldname == "Comment":            # now you are in the wizard update the customers
            listview = self.getListView("SearchCustomerResult")
            listview.setColumns(self.getColumnLabels())
            self.refreshResults("CustomerSearch", "Customer")
            

    def refreshMonths(self):
        record = self.getRecord()
        date = StartOfMonth(record.Date)
        savActual = self.getScrollAreaView("ScrollCalendarActual")
        self.drawMonthView(savActual,date)
        savPrev = self.getScrollAreaView("ScrollCalendarPrev")
        self.drawMonthView(savPrev,addMonths(date,-1))
        savNext = self.getScrollAreaView("ScrollCalendarNext")
        self.drawMonthView(savNext,addMonths(date,1))
        if (record.ShowWeek == True):
            self.drawWeekView()
        else:
            self.drawDayView()

    def movecalls(self):
        record = self.getRecord()
        from Activity import Activity
        for sernr in self.selectedcalls:
            act = Activity.bring(sernr)
            if act:
              act.StartDate = record.Date
              act.EndDate = record.Date
              res = act.store()
              if not res: message(res)
        commit()
        self.selectedcalls = []

    def refreshDayWeek(self):
        record = self.getRecord()
        if (record.ShowWeek == True):
            self.drawWeekView()
        else:
            self.drawDayView()

    def refreshAll(self):
        record = self.getRecord()
        date = StartOfMonth(record.Date)
        savActual = self.getScrollAreaView("ScrollCalendarActual")
        self.drawMonthView(savActual,date)
        savPrev = self.getScrollAreaView("ScrollCalendarPrev")
        self.drawMonthView(savPrev,addMonths(date,-1))
        savNext = self.getScrollAreaView("ScrollCalendarNext")
        self.drawMonthView(savNext,addMonths(date,1))
        if (record.ShowWeek == True):
            self.drawWeekView()
        else:
            self.drawDayView()

    def afterShowRecord(self):
        ParentCalendarControlsWindow.afterShowRecord(self)
        record = self.getRecord()
        record.Date = self.Date
        record.StartTime = "08:00:00"
        record.EndTime = "19:00:00"
        from CRMSettings import CRMSettings
        crmsettings = CRMSettings.bring()
        if not crmsettings.fields("CalendarStartTime").isNone(): record.StartTime = crmsettings.CalendarStartTime
        if not crmsettings.fields("CalendarEndTime").isNone(): record.EndTime = crmsettings.CalendarEndTime
        record.Users = currentUser()
        record.ShowWeek = True
        record.Type = 0
        record.Function = 0
        record.Duration = 2
        record.InitTime = record.StartTime
        record.FromDate = record.Date
        record.ToDate = EndOfMonth(record.Date)
        date = StartOfMonth(record.Date)
        savActual = self.getScrollAreaView("ScrollCalendarActual")
        self.drawMonthView(savActual,date)
        savPrev = self.getScrollAreaView("ScrollCalendarPrev")
        self.drawMonthView(savPrev,addMonths(date,-1))
        savNext = self.getScrollAreaView("ScrollCalendarNext")
        self.drawMonthView(savNext,addMonths(date,1))
        self.drawWeekView()

        listview = self.getListView("SearchUserResult")
        listview.setColumns(self.getColumnLabels())
        self.refreshResults("UserSearch","User")
        self.getRecord().setFocusOnField("SearchUserField")

    def drawMonthView(self,sav,date):
        from CalendarMonthVisual import CalendarMonthVisual
        record = self.getRecord()
        sav.repaintArea()
        sa = CalendarMonthVisual(record.Users)
        sa.setDate(date)
        sa.load()
        sav.setScrollArea(sa)
        sav.clear()
        sav.show()
        #sav.resize(200,180) #esta determinado en em xml

    def createActivity(self):
        from Activity import Activity
        from ActivityWindow import ActivityWindow
        act = Activity()
        act.defaults()
        act.Users = self.getRecord().Users
        act.StartDate = self.getRecord().Date
        act.EndDate = self.getRecord().Date
        actwindow = ActivityWindow()
        actwindow.setRecord(act)
        actwindow.open()
        return act

    def buttonClicked(self,buttonname):
        record = self.getRecord()
        date = StartOfMonth(record.Date)
        if buttonname == "loadScroll":
            savActual = self.getScrollAreaView("ScrollCalendarActual")
            self.drawMonthView(savActual,date)
            savPrev = self.getScrollAreaView("ScrollCalendarPrev")
            self.drawMonthView(savPrev,addMonths(date,-1))
            savNext = self.getScrollAreaView("ScrollCalendarNext")
            self.drawMonthView(savNext,addMonths(date,1))
            if (record.ShowWeek == True):
                self.drawWeekView()
            else:
                self.drawDayView()
        elif buttonname == "next":
            record.Date = addMonths(date,1)
            savActual = self.getScrollAreaView("ScrollCalendarActual")
            self.drawMonthView(savActual,record.Date)
            savPrev = self.getScrollAreaView("ScrollCalendarPrev")
            self.drawMonthView(savPrev,addMonths(record.Date,-1))
            savNext = self.getScrollAreaView("ScrollCalendarNext")
            self.drawMonthView(savNext,addMonths(record.Date,1))
            if (record.ShowWeek == True):
                self.drawWeekView()
            else:
                self.drawDayView()
        elif buttonname == "previus":
            record.Date = addMonths(date,-1)
            savActual = self.getScrollAreaView("ScrollCalendarActual")
            self.drawMonthView(savActual,record.Date)
            savPrev = self.getScrollAreaView("ScrollCalendarPrev")
            self.drawMonthView(savPrev,addMonths(record.Date,-1))
            savNext = self.getScrollAreaView("ScrollCalendarNext")
            self.drawMonthView(savNext,addMonths(record.Date,1))
            if (record.ShowWeek == True):
                self.drawWeekView()
            else:
                self.drawDayView()
        elif buttonname == "activity":
            self.createActivity()
        elif buttonname == "goToday":
            record = self.getRecord()
            record.Date = today()
            date = StartOfMonth(record.Date)
            self.drawDayView()
            savActual = self.getScrollAreaView("ScrollCalendarActual")
            self.drawMonthView(savActual,date)
            savPrev = self.getScrollAreaView("ScrollCalendarPrev")
            self.drawMonthView(savPrev,addMonths(date,-1))
            savNext = self.getScrollAreaView("ScrollCalendarNext")
            self.drawMonthView(savNext,addMonths(date,1))
        elif buttonname == "horizontal":
            from HCalendarControls import HCalendarControls
            from HCalendarControlsWindow import HCalendarControlsWindow
            act = HCalendarControls()
            act.defaults()
            act.FromDate = self.getRecord().Date
            act.ToDate = addDays(self.getRecord().Date,5)
            actwindow = HCalendarControlsWindow()
            actwindow.setRecord(act)
            actwindow.open()
        elif buttonname == "overview":
            from WeeklyOverview import WeeklyOverview
            from CRMSettings import CRMSettings
            cs = CRMSettings.bring()
            wdays = 7
            if cs.CalendarWeekMode: wdays = 5
            record = self.getRecord()
            report = WeeklyOverview()
            report.defaults()
            s = StartOfWeek(record.Date)
            e = addDays(s,wdays)
            report.getRecord().FromDate = s
            report.getRecord().ToDate = e
            report.open(False)
        elif (buttonname == "smallCalendar"):
            self.smallCalendar()
        elif (buttonname == "bigCalendar"):
            self.bigCalendar()
        elif buttonname == "addHour":
           self.getRecord().Duration += 1
        elif buttonname == "subHour":
           self.getRecord().Duration -= 1
        elif buttonname == "genActivities":
           self.createActivitiesWizard()

    def drawDayView(self):
        record = self.getRecord()
        self.Persons = record.Users.replace(' ','').split(",")
        from CalendarDayVisual import CalendarDayVisual
        ba = CalendarDayVisual(record.Date,record.StartTime.hour,record.EndTime.hour,self.Persons)
        lines=ba.load()
        ba.setGraphLine(lines["counth"],lines["countv"],lines["xi"],lines["yi"],lines["xf"],lines["yf"],lines["width"],lines["height"])
        baview = self.getButtonAreaView("ActivityCalendar")
        baview.repaintArea()
        baview.setButtonArea(ba)
        baview.show()
        self.drawTaskDay(False)
        self.drawCallDay(False)

    def drawWeekView(self):
        record = self.getRecord()
        self.Persons = record.Users.replace(' ','').split(",")
        from CRMSettings import CRMSettings
        crmsettings = CRMSettings.bring()
        from CalendarWeekVisual import CalendarWeekVisual
        weekarea = CalendarWeekVisual(record.Date,record.StartTime.hour,record.EndTime.hour,self.Persons, (7,5)[crmsettings.CalendarWeekMode])
        lines=weekarea.load()
        weekarea.setGraphLine(lines["counth"],lines["countv"],lines["xi"],lines["yi"],lines["xf"],lines["yf"],lines["width"],lines["height"])
        weekareaview = self.getButtonAreaView("ActivityCalendar")
        weekareaview.repaintArea()
        weekareaview.setButtonArea(weekarea)
        weekareaview.show()
        self.drawTaskDay(True)
        self.drawCallDay(True)

    def drawTaskDay(self,showWeek):
        record = self.getRecord()
        rview = self.getReportView("TaskCalendar")
        from TaskList import TaskList
        report = TaskList()
        report.setView(rview)
        report.Date = record.Date
        report.Users = record.Users
        report.showWeekTask = showWeek
        report.showOldTask = False
        report.open(False)
        #rview.resize(400,300)

    def drawCallDay(self,showWeek):
        record = self.getRecord()
        rview = self.getReportView("CallCalendar")
        from CallList import CallList
        report = CallList()
        report.setView(rview)
        report.record = record
        report.window = self
        report.Date = record.Date
        report.Users = record.Users
        report.showWeekTask = showWeek
        report.showOldTask = False
        report.open(False)
        #rview.resize(400,300)

    def createActivitiesWizard(self):
        from ActivitiesWizard import ActivitiesWizard
        awiz = ActivitiesWizard()
        awiz.defaults()
        awiz.record = self.getRecord()
        awiz.open(False)

    def smallCalendar(self):
        from SmallCalendar import SmallCalendar
        from SmallCalendarWindow import SmallCalendarWindow
        scw = SmallCalendarWindow()
        scw.setRecord(self.getRecord())
        scw.open()
        self.close()

    def bigCalendar(self):
        from CalendarControlsWindow import CalendarControlsWindow
        scw = CalendarControlsWindow()
        scw.setRecord(self.getRecord())
        scw.open()
        self.close()

    def showRooster(self):
        from WeeklyTimeTable import WeeklyTimeTable
        from CRMSettings import CRMSettings
        cs = CRMSettings.bring()
        if cs.CalendarWeekMode: wdays = 5
        record = self.getRecord()
        report = WeeklyTimeTable()
        report.defaults()
        s = StartOfWeek(record.Date)
        e = addDays(s,6)
        report.getRecord().FromDate = s
        report.getRecord().ToDate = e
        report.open(False)

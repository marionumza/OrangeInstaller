#encoding: utf-8
from OpenOrange import *
from Report import Report

ParentLetterTransWindow = SuperClass("LetterTransWindow","FinancialTransWindow",__file__)
class LetterTransWindow(ParentLetterTransWindow):

    def afterEdit(self, fieldname):
        ParentLetterTransWindow.afterEdit(self, fieldname)
        record = self.getRecord()
        if (fieldname == "Cash") or (fieldname == "Commision"):
            record.sumUp()
        elif (fieldname == "LetterState"):
            record.pasteLetterState()
        elif (fieldname == "OperationType"):
            record.pasteOperationType()
        elif (fieldname == "Interestflag"):
            record.sumUp()
            
    def readFile(self):
        filename = getOpenFileName(tr("Select File"))      
        lt = self.getRecord()
        res = lt.readfile(filename)
        if not res: message(res)

    def genFile(self):
        lt = self.getRecord()
        res = lt.writefile()
        if not res: message(res)

    def printLetters(self):
        from Letter import Letter
        lt = self.getRecord()
        if len(lt.LetterTransOutRows):
          for row in lt.LetterTransOutRows:
             let = Letter.bring(row.LetterNr)
             if let:
                docs = let.getDocument()
                docname, docclass = "", ""
                if isinstance(docs, tuple):
                    docname, docclass = docs
                else:
                    docname = docclass = docs
                if not docclass: docclass = docname
                printDocument(docname, docclass ,let, True, True, None)
        else:
          for row in lt.LetterTransInRows:
             let = Letter.bring(row.LetterNr)
             if let:
                docs = let.getDocument()
                docname, docclass = "", ""
                if isinstance(docs, tuple):
                    docname, docclass = docs
                else:
                    docname = docclass = docs
                if not docclass: docclass = docname
                printDocument(docname, docclass ,let, True, True, lt.SerNr)


    def afterDeleteRow(self, fieldname, rownr):
        self.getRecord().sumUp()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        from Letter import Letter
        lt= self.getRecord()
        if (fieldname == "LetterTransInvRows"):
            ltitem = lt.LetterTransInvRows[rownr]
            if (rowfieldname == "InvoiceNr"):
                res = ltitem.pasteInvoiceNr()
                lt.sumUp()
        if (fieldname == "LetterTransInRows"):
            ltitem = lt.LetterTransInRows[rownr]
            if (rowfieldname == "LetterNum"):
                res = ltitem.pasteLetterNum(lt)
                if not res: message(res)
            elif (rowfieldname == "LetterNr"):
                let = Letter.bring(ltitem.LetterNr)
                if (let):
                    res = ltitem.pasteLetterNr(lt)
                    if not res: message(res)
            lt.sumUp()
        elif (fieldname == "LetterTransOutRows"):
            ltitem = lt.LetterTransOutRows[rownr]
            if (rowfieldname == "LetterNum"):
                let = Letter()
                let.LetterNr = ltitem.LetterNum
                if not let.load():
                    let = Letter()
                    let.BankNr = ltitem.LetterNum
                    if not let.load(): return
                ltitem.LetterNr = lt.SerNr
                res = ltitem.pasteLetterNr(lt)
                if not res: message(res)
            elif (rowfieldname == "LetterNr"):
                let = Letter.bring(ltitem.LetterNr)
                if (let):
                    #if (let.ExpDate > lt.TransDate) and (lt.OperationType == 0):
                    #    message("Fecha de vencimiento del cheque posterior al LetterTranso")
                    #    ltitem.ChequeNr = 0
                    #    ltitem.Amount = 0
                    #else:
                    res = ltitem.pasteLetterNr(lt)
                    if not res: message(res)
            lt.sumUp()

    def genDebitNote(self):
        ltrans = self.getRecord()
        if (ltrans.isNew() or ltrans.isModified()):
            message("REGISTERNOTSAVED")
            return
        custcode = [ deprow.getLetterField("CustCode") for deprow in ltrans.LetterTransInRows ][0]
        rec = ltrans.genDebitNote(custcode,ltrans.TotalCommission)
        if (rec):
            rec.openInWindow()

    def genReceipt(self):
        ltrans = self.getRecord()
        if (ltrans.isNew() or ltrans.isModified()):
            message("REGISTERNOTSAVED")
            return
        rec = ltrans.genReceipt()
        if (rec):
            from ReceiptWindow import ReceiptWindow
            rwin = ReceiptWindow()
            rwin.setRecord(rec)
            rwin.open()
            
    def filterPasteWindowRow(self,fieldname,rowfieldname,rownr):
        from LetterState import LetterState
        record = self.getRecord()
        if not record.LetterState: return ""
        statedic = LetterState.getFieldDictonary(["NextStates"])
        prevstates = [ prev for (prev,nextstates) in statedic.items() if record.LetterState in nextstates ]
        if (fieldname == "LetterTransInRows"):
            if (rowfieldname == "LetterNr"):
                filter = " {LetterState} IN ('%s') " %("','".join(prevstates))
                return filter
        return filter

    #Modificaciones para llamar varias ventanas de Mail EC
    #--------------------------------------------------------------
    def sendMail(self):
        record = self.getRecord()
        from Mail import Mail
        from MailWindow import MailWindow
        from Letter import Letter
        records = set()
        for row in record.LetterTransInRows:
            lt = Letter.bring(row.LetterNr)
            if lt:
                records.add((lt.CustCode,lt.SalesMan))
        for c in records:
            record.CustCode = c[0]
            record.SalesMan = c[1]
            mail = Mail()
            mail.defaults()
            try:
                mail.OriginId = record.getPortableId()
                mail.OriginRecordName = record.name()
            except:
                pass
            res = mail.save() # i save the record here, because importHTML method needs internalId value defined.
            mail.importHTML(record.getHTML())
            commit()
            if hasattr(record,"CustCode"):
                mail.EntityType = 0
                mail.CustCode = record.CustCode
                from Customer import Customer
                cust = Customer.bring(record.CustCode)
                mail.pasteCustCode()
            if record.hasField("SerNr"):
                mail.Subject = "%s %i" % (record.getTitle(),record.SerNr)
            elif record.hasField("Code"):
                mail.Subject = "%s %s" % (record.getTitle(),utf8(record.Code))
            mailWindow = MailWindow()
            mailWindow.setRecord(mail)
            mailWindow.open()

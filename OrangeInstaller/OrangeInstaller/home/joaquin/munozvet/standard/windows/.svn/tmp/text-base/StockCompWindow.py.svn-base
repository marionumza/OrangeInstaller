#encoding: utf-8
from OpenOrange import *
from GlobalTools import *
import string
from StockComp import StockCompItemRow,StockComp

ParentStockCompWindow = SuperClass("StockCompWindow", "TransactionWindow", __file__)
class StockCompWindow(ParentStockCompWindow):
    #DefaultAfterEditRow = True
    #DefaultAfterEdit = True

    def afterEdit(self, fieldname):
        ParentStockCompWindow.afterEdit(self, fieldname)
        #afterEdit(self, fieldname)
        record = self.getRecord()
        if (fieldname == "Qty"):
            if (record.ArtCode):
              if hasattr(self,"artdict") and self.artdict.has_key(record.ArtCode):
                scrow = record.Items[self.artdict[record.ArtCode]["Row"]]
                scrow.Qty = record.Qty
                scrow.pasteQty(record)
                self.artdict[record.ArtCode]["Qty"] = record.Qty
                self.buttonClicked("search")
                record.ArtCode = None
                record.ArtName = None
                record.Qty = None
        elif (fieldname == "BarCode"):
            barCode = record.BarCode
            record.BarCode = ""
            from Item import Item
            it = Item.bring(barCode)
            if (it):
              i = 0
              for irow in record.Items:
                if (it.Code == irow.ArtCode):
                   irow.Qty += 1
                   if (record.QtyInput):
                       record.setFocusOnField("BarCode")
                   else:
                       record.setFocusOnField("Items","Qty",i)
                   break
                i += 1
              else:
                scrow = StockCompItemRow()
                scrow.ArtCode = it.Code
                scrow.pasteArtCode(record)
                scrow.Qty = 1
                scrow.pasteQty(record)
                record.Items.append(scrow)
                record.setFocusOnField("BarCode")
        elif fieldname == "SupCode":
            record.pasteSupCode()

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentStockCompWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        record = self.getRecord()
        if (fieldname == "Items"):
            row = record.Items[rownr]
            if (rowfieldname == "ArtCode"):
                row.pasteArtCode(record)
            elif (rowfieldname == "Qty"):
                row.pasteQty(record)
            elif (rowfieldname == "SerialNr"):
                row.pasteSerialNr(record)
            elif (rowfieldname == "Pos"):
                row.pastePos(record)
            elif (rowfieldname == "Unit"):
                row.pasteUnit(record)

    def fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr):
        if (pastewindowname == "SerialNrPasteWindow"):
            record = self.getRecord()
            items = record.details(fieldname)
            serialNrInclude = []
            itemrow = items[rownr]
            for row in items:
                if row.ArtCode == itemrow.ArtCode:
                    serialNrInclude.append(row.SerialNr)
            query = Query()
            query.sql = "SELECT Stock.ArtCode, {BestBefore} as DueDate, Stock.{SerialNr}, {StockDepo}, {StockPos}, SUM(Qty) as {Qty} FROM [Stock] "
            query.sql += "LEFT JOIN BatchText bt ON bt.ArtCode = Stock.ArtCode and bt.SerialNr = Stock.SerialNr\n"
            query.sql += "WHERE?AND Stock.{SerialNr} <> s|| "
            query.sql += "WHERE?AND Stock.{SerialNr} NOT IN ('%s') " % ("','".join(serialNrInclude))
            query.sql += "WHERE?AND Stock.{ArtCode} = s|%s| " % itemrow.ArtCode
            query.sql += "WHERE?AND {StockDepo} = s|%s| " % record.StockDepo
            if itemrow.Pos: query.sql += "WHERE?AND {StockPos} = s|%s| " % itemrow.Pos
            query.sql += "GROUP BY Stock.{SerialNr} "
            if not itemrow.Pos: query.sql += ", {StockPos} "
            query.sql += " HAVING {Qty} > 0 "
            query.sql += " ORDER BY {DueDate} ASC, Stock.{SerialNr} "
            if query.open():
                return query
        return ParentStockCompWindow.fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr)

    def buttonClicked(self, buttonname):
        stckcp = self.getRecord()
        if (buttonname == "search"):
            if (stckcp.Items.count() > 0):
                repv = self.getReportView("ItemSearch")
                from StockCompSearchReport import StockCompSearchReport
                sr = StockCompSearchReport()
                sr.setView(repv)
                sr.record = stckcp
                sr.recordwindow = self
                sr.open(False)
            else:
                message(tr("No Items To Search"))
        elif (buttonname == "clearItems"):
            if stckcp.canDoAction():
                stckcp.Items.clear()
        elif (buttonname == "clearAdjust"):
            stckcp.clearAdjust()
        elif (buttonname == "setDepoToZero"):
            stckcp.setDepoToZero()

    def addStockComp(self):
        stckcp = self.getRecord()
        res = getString(tr("Inventory to add"),"")
        if (res):
          stckcp.addStockComp(int(res))

    def loadItems(self):
        record = self.getRecord()
        res = getSelection(tr("Include"), (tr("All"), tr("Only Items in Stock")))
        if res:
            if (res == tr("All")):
                record.loadItems(True)
            else:
                record.loadItems(False)
            self.makeItemsDict()
        return True

    def makeItemsDict(self):
        self.artdict = {}
        record  = self.getRecord()
        #alert("com")
        log("crear diccionario")
        for rline in record.Items:
            if (not self.artdict.has_key(rline.ArtCode)):
                self.artdict[rline.ArtCode] = {}
                self.artdict[rline.ArtCode]["Qty"] = rline.Qty
                self.artdict[rline.ArtCode]["Row"] = rline.rowNr
        log("diccionario creado")
        #alert("ter")

    @checkTransactionForAction
    def genAdjustDocuments(self):
        record = self.getRecord()
        sdep,grec = record.genAdjustDocuments()
        if (sdep):
            sdep.openInWindow()
        if (grec):
            grec.openInWindow()

    def showStockCompOverview(self):
        from StockCompOverview import StockCompOverview
        scr = StockCompOverview()
        screc = scr.getRecord()
        screc.SerNr = self.getRecord().SerNr
        scr.open(False)
        
    def loadFromFile(self):
        message("%s: TSV<br>%s: %s, %s, %s, %s" % (tr("File Format"), tr("Columns"), tr("Code"), tr("Quantity"), tr("Serial Number"), tr("Position")))
        record = self.getRecord()
        fileDic = {}
        fname = getOpenFileName()
        if fname:
            file = open(fname, 'r')
            lineNr = 1
            for line in file.readlines():
                fields = line.replace("\n","").split("\t")
                if len(fields) != 4:
                    message("Format Error line: %i \n%s" %(lineNr,line))
                    return
                code = fields[0]
                qty = float(fields[1])
                serialnr = fields[2]
                pos = fields[3].strip()
                key = '%s|%s|%s' % (code, serialnr, pos)
                itemdata = fileDic.get(key, {})
                if itemdata:
                    itemdata["Qty"] += qty
                else:
                    itemdata["ArtCode"] = code
                    itemdata["Qty"] = qty
                    itemdata["SerialNr"] = serialnr
                    itemdata["Pos"] = pos
                fileDic[key] = itemdata
                lineNr += 1
            record.uploadItemsfromFile(fileDic)
#encoding: utf-8
from OpenOrange import *

ParentItemWindow = SuperClass("ItemWindow","MasterWindow",__file__)
class ItemWindow(ParentItemWindow):

    def afterEdit(self, fieldname):
        ParentItemWindow.afterEdit(self, fieldname)
        item = self.getRecord()
        if (fieldname in ["Width","Height","Length"]):
            item.Volume = item.Width * item.Height * item.Length
            item.Surface = item.Width * item.Length
            item.pasteVolume()
        elif (fieldname == "Volume"):
            item.pasteVolume()
        elif (fieldname == "Density"):
            item.pasteDensity()
        elif (fieldname == "Weight"):
            item.pasteWeight()
        elif fieldname == "Package":
            item.pastePackage()
        elif (fieldname == "Recipe"):
            item.pasteRecipe()

    def getBasePrice(self):
        self.getRecord().getBasePrice()

#    SE AHORRAN METODOS, TRES EN UNO.
#    def genSupplierItem(self):
#        self.getRecord().genSupplierItem()

#    def openSupplierItem(self):
#        from SupplierItem import SupplierItem
#        sitem = SupplierItem()
#        sitem.ArtCode = self.getRecord().Code
#        sitem.Default = True
#        if sitem.load():
#            from SupplierItemWindow import SupplierItemWindow
#            sitemwindow = SupplierItemWindow()
#            sitemwindow.setRecord(sitem)
#            sitemwindow.open()

#    def showSupplierItems(self):
#        record = self.getRecord()
#        from SupplierItemList import SupplierItemList
#        report = SupplierItemList()
#        report.getRecord().ArtCode = record.Code
#        report.open(False)


    def showPriceHistory(self):
        from PriceHistoryReport import PriceHistoryReport
        pr = PriceHistoryReport()
        pr.defaults()
        prrec = pr.getRecord()
        prrec.ArtCode = self.getRecord().Code
        pr.open(False)
    

    def showPrices(self):
        from PricesReport import PricesReport
        pr = PricesReport()
        pr.defaults()
        prrec = pr.getRecord()
        prrec.ArtCode = self.getRecord().Code
        pr.open(False)
    

    def showSupplierItem(self):
        record = self.getRecord()
        if (record.isNew() or record.isModified()):
            message(tr("REGISTERNOTSAVED"))
            return 
        from SupplierItem import SupplierItem
        sitem = SupplierItem()
        sitem.ArtCode = self.getRecord().Code
        sitem.Default  = True
        if (sitem.load()):
            sitem.openInWindow()
        else:
            sitem = SupplierItem()
            sitem.ArtCode = self.getRecord().Code
            if sitem.load():
                sitem.openInWindow()
            else:
                res = askYesNo(tr("There Is No Supplier Items. Do You Want to Create It?"))
                if (res):
                    self.getRecord().genSupplierItem()
                else:
                    return

    def showItemHistory(self):
        record = self.getRecord()
        from ItemHistory import ItemHistory
        report = ItemHistory()
        report.defaults()
        report.getRecord().Item = record.Code
        report.getRecord().DontShowItemCodeName = True
        report.getRecord().DontShowTime = True
        report.open(False)

    def showDescriptions(self):
        record = self.getRecord()
        from DescriptionsList import DescriptionsList
        itemdesc = DescriptionsList()
        itemdesc.defaults()
        itemdesc.getRecord().Code = record.Code
        itemdesc.getRecord().Record = record.name()
        itemdesc.open(False)

    def buttonClicked(self, buttonname):
        if buttonname == "calcStockMin":
            item = self.getRecord()
            if item.StockMinFormuleCode:
                from Formule import Formule
                formule = Formule.bring(item.StockMinFormuleCode)
                if formule:
                    res = formule.getFormuleResult(Item=item)
                    item.MinLevel = res

        if buttonname == "calcStockMax":
            item = self.getRecord()
            if item.StockMaxFormuleCode:
                from Formule import Formule
                formule = Formule.bring(item.StockMaxFormuleCode)
                if formule:
                    res = formule.getFormuleResult(Item=item)
                    item.MaxLevel = res

    def openCostWindow(self):
        record = self.getRecord()
        if (record.isNew() or record.isModified()):
            message(tr("REGISTERNOTSAVED"))
            return 
        item = self.getRecord()
        from ItemCostWindow import ItemCostWindow
        wnd = ItemCostWindow()
        ic = item.getItemCost()
        wnd.setRecord(ic)
        wnd.open()

    def showItemStatusReport(self):
        record = self.getRecord()
        from ItemStatusReport import ItemStatusReport
        report = ItemStatusReport()
        report.getRecord().ArtCode = record.Code
        report.ArtCode = record.Code
        report.open(False)
        
    def showRecipe(self):
        record = self.getRecord()
        if (record.isNew() or record.isModified()):
            message(tr("REGISTERNOTSAVED"))
            return 
        from Recipe import Recipe
        recipe = Recipe()
        recipe.Code = self.getRecord().Code
        if recipe.load():
            recipe.openInWindow()
        else:
            res = askYesNo(tr("There Is No Recipe. Do You Want to Create It?"))
            if (res):
                self.getRecord().genRecipe()
            else:
                return
            
    @checkIfNewOrModified
    def genBarCodeItem(self):
        record = self.getRecord()
        record.genBarCode()
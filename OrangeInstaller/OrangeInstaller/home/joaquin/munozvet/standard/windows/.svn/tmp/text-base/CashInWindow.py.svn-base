#encoding: utf-8
from OpenOrange import *
from GlobalTools import *

ParentCashInWindow = SuperClass("CashInWindow","FinancialTransWindow",__file__)
class CashInWindow(ParentCashInWindow):

    def activateNextCell(self, matrixname, row, col):
        columns = self.getMatrixColumns(matrixname)
        if (matrixname=="CashInCntRows"):
          if columns[col] == "CounterConcept":
              row,col = getNextCol(columns,row,col,"Amount")
          elif columns[col] == "Amount": # To Next Row
              col = 0
              row += 1
          else:
              row,col = getNextCol(columns,row,col,"")
        elif (matrixname=="CashOutPayRows"):
          if columns[col] == "PayMode":
              row,col = getNextCol(columns,row,col,"PayValue")
          elif columns[col] == "PayValue": # To Next Row
              col = 0
              row += 1
          else:
              row,col = getNextCol(columns,row,col,"")
        return (row,col)

    def afterEditRow(self, fieldname, rowfieldname, rownr):
        ParentCashInWindow.afterEditRow(self, fieldname, rowfieldname, rownr)
        co = self.getRecord()
        if (fieldname == "CashInPayRows"):
            copr = co.CashInPayRows[rownr]
            if (rowfieldname == "PayMode"):
                copr.pastePayMode(co)
                co.sumUp()
            elif (rowfieldname == "ChequeNr"):
                copr.pasteChequeNr()
                co.sumUp()
            elif (rowfieldname == "PayValue"):
                co.sumUp()
        elif (fieldname == "CashInCntRows"):
            copr = co.CashInCntRows[rownr]
            if (rowfieldname == "CounterConcept"):
                copr.pasteCounterConcept()
                co.sumUp()
            elif (rowfieldname == "ExpenseNr"):
                copr.pasteExpenseNr()                
            elif (rowfieldname == "Amount"):
                co.sumUp()
                co.payConcepts()
                co.sumUp()

    def getPasteWindowNameRow(self,fieldname,rowfieldname,rownr):
        record = self.getRecord()
        if (fieldname == "CashInPayRows"):
            row = record.CashInPayRows[rownr]
            if(rowfieldname == "ChequeNr"):
                from PayMode import PayMode
                pm = PayMode.bring(row.PayMode)
                if (pm):
                    if (pm.PayType == 2):
                        return "ChequePasteWindow"
                    elif (pm.PayType == 1):
                        return "CouponPasteWindow"
        return ParentCashInWindow.getPasteWindowNameRow(self,fieldname,rowfieldname,rownr)

    def filterPasteWindowRow(self,fieldname,rowfieldname,rownr):
        casho = self.getRecord()
        if (fieldname == "CashInCntRows"):
            if(rowfieldname == "CounterConcept"):
                return "({CashInf} OR (NOT {CashInf} AND NOT {CashOutf})) "
        elif (fieldname == "CashInPayRows"):
            row = casho.CashInPayRows[rownr]
            if(rowfieldname == "ChequeNr"):
                from PayMode import PayMode
                pm = PayMode.bring(row.PayMode)
                if pm and (pm.PayType == 2):
                  return "{Status} = 0"
            elif (rowfieldname == "PayMode"):
                res = "(({Closed} IS NULL OR {Closed} = i|0|))"
                from SalesSettings import SalesSettings
                ss = SalesSettings.bring()
                if (ss.UsePayModeByOffice):
                    res += "AND (Office LIKE s|%%,%s,%%| " %self.getRecord().Office
                    res += "OR Office LIKE s|%s,%%| "  %self.getRecord().Office
                    res += "OR Office LIKE s|%%,%s| "  %self.getRecord().Office
                    res += "OR Office = s|%s| )"  %self.getRecord().Office
                return res
            elif(rowfieldname == "Person"):
                  return "ContactType = i|3|"

    def fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr):
        ParentCashInWindow.fillPasteWindowRow(self, pastewindowname, fieldname, rowfieldname, rownr)
        if pastewindowname == "XPasteWindow":
            record = self.getRecord()
            prow = record.details(fieldname)[rownr]
            from PayMode import PayMode
            from CredCardType import CredCardType
            pm = PayMode.bring(prow.PayMode)
            query = []
            if pm:
              ct = CredCardType.bring(pm.CredCardType)
              if ct:
                for srow in ct.SurChargeRows:
                    z = NewRecord("X")
                    z.Code = srow.Plan
                    from CredCardPlan import CredCardPlan
                    ccp = CredCardPlan.bring(srow.Plan)
                    if (ccp):
                        z.Name = ccp.Name
                    else:
                        z.Name = srow.Plan
                    query.append(z)
            return query
        return None

    def afterDeleteRow(self, detailName, rownr):
        ParentCashInWindow.afterDeleteRow(self, detailName, rownr)
        record = self.getRecord()
        record.sumUp()

    def balance(self):
        record = self.getRecord()
        fieldname = self.currentField()
        if (fieldname == "CashInCntRows"):
            totalcnt = 0
            for cntrow in record.CashInCntRows:
                totalcnt += cntrow.Amount
            rest = record.TotalPaid - totalcnt
            rownr = self.currentRow(fieldname)
            if (rownr > 0 and rownr < record.details(fieldname).count()):
                row = record.details(fieldname)[rownr]
                if (not row.Amount):
                    row.Amount = rest
                    return 
            if (rest):
                from CashIn import CashInCntRow
                nrow = CashInCntRow()
                nrow.Amount = rest
                record.CashInCntRows.append(nrow)
        elif (fieldname == "CashInPayRows"):
            totalpay = 0
            for payrow in record.CashInPayRows:
                totalpay += payrow.PayValue
            rest = record.Total - totalpay
            rownr = self.currentRow(fieldname)
            if (0 < rownr < record.details(fieldname).count()):
                row = record.details(fieldname)[rownr]
                if (not row.PayValue):
                    row.PayValue = rest
                    return 
            if (rest):
                from CashIn import CashInPayRow
                nrow = CashInPayRow()
                nrow.PayValue = rest
                record.CashInPayRows.append(nrow)

            